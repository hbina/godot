<?xml version="1.0"?>
<analyzerinfo checksum="2245874660">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hint_name&apos; can be reduced." verbose="The scope of the variable &apos;hint_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="142" column="24"/>
            <symbol>hint_name</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="/home/hbina/git/godot/main/tests/test_shader_lang.cpp:46:15" call-funcname="_mktab" call-argnr="1" file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="197" col="18" call-argexpr="p_level-1" call-argvaluetype="0" call-argvalue="0">
  <path file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="322" col="35" info="Calling function 'dump_node_code', 2nd argument '0' value is 0"/>
  <path file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="182" col="49" info="Calling function 'dump_node_code', 2nd argument 'p_level+1' value is 1"/>
</function-call><function-call call-id="/home/hbina/git/godot/main/tests/test_shader_lang.cpp:121:15" call-funcname="dump_node_code" call-argnr="2" file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="322" col="23" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/main/tests/test_shader_lang.cpp:121:15" call-funcname="dump_node_code" call-argnr="1" file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="322" col="9" my-id="/home/hbina/git/godot/main/tests/test_shader_lang.cpp:318:14" my-argnr="2"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="/home/hbina/git/godot/main/tests/test_shader_lang.cpp:121:15" my-argnr="1" my-argname="p_node" file="/home/hbina/git/godot/main/tests/test_shader_lang.cpp" line="125" col="10" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="_mktab" lineNumber="46"/>
    <functiondecl functionName="_typestr" lineNumber="56"/>
    <functiondecl functionName="_prestr" lineNumber="61"/>
    <functiondecl functionName="_opstr" lineNumber="76"/>
    <functiondecl functionName="get_constant_text" lineNumber="81"/>
    <functiondecl functionName="dump_node_code" lineNumber="121"/>
    <functiondecl functionName="recreate_code" lineNumber="318"/>
    <functiondecl functionName="test" lineNumber="327"/>
    <functioncall functionName="E"/>
    <functioncall functionName="ERR_FAIL_V"/>
    <functioncall functionName="FunctionInfo"/>
    <functioncall functionName="HINT_MAX"/>
    <functioncall functionName="NULL"/>
    <functioncall functionName="READ"/>
    <functioncall functionName="String"/>
    <functioncall functionName="TYPE_VEC3"/>
    <functioncall functionName="Uniform"/>
    <functioncall functionName="Variable"/>
    <functioncall functionName="Varying"/>
    <functioncall functionName="_mktab"/>
    <functioncall functionName="_opstr"/>
    <functioncall functionName="_prestr"/>
    <functioncall functionName="_typestr"/>
    <functioncall functionName="back"/>
    <functioncall functionName="body"/>
    <functioncall functionName="break"/>
    <functioncall functionName="code"/>
    <functioncall functionName="code2"/>
    <functioncall functionName="compile"/>
    <functioncall functionName="datatype"/>
    <functioncall functionName="default"/>
    <functioncall functionName="default_value"/>
    <functioncall functionName="dt"/>
    <functioncall functionName="dump_node_code"/>
    <functioncall functionName="empty"/>
    <functioncall functionName="eof_reached"/>
    <functioncall functionName="err"/>
    <functioncall functionName="fa"/>
    <functioncall functionName="for"/>
    <functioncall functionName="front"/>
    <functioncall functionName="function"/>
    <functioncall functionName="get"/>
    <functioncall functionName="get_8"/>
    <functioncall functionName="get_cmdline_args"/>
    <functioncall functionName="get_constant_text"/>
    <functioncall functionName="get_datatype_name"/>
    <functioncall functionName="get_error_line"/>
    <functioncall functionName="get_error_text"/>
    <functioncall functionName="get_operator_text"/>
    <functioncall functionName="get_shader"/>
    <functioncall functionName="get_singleton"/>
    <functioncall functionName="hint"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="insert"/>
    <functioncall functionName="j"/>
    <functioncall functionName="key"/>
    <functioncall functionName="name"/>
    <functioncall functionName="next"/>
    <functioncall functionName="nullptr"/>
    <functioncall functionName="op"/>
    <functioncall functionName="open"/>
    <functioncall functionName="owner"/>
    <functioncall functionName="p_level"/>
    <functioncall functionName="p_node"/>
    <functioncall functionName="p_op"/>
    <functioncall functionName="p_pres"/>
    <functioncall functionName="p_program"/>
    <functioncall functionName="p_str"/>
    <functioncall functionName="p_type"/>
    <functioncall functionName="precision"/>
    <functioncall functionName="print_line"/>
    <functioncall functionName="push_back"/>
    <functioncall functionName="real"/>
    <functioncall functionName="recreate_code"/>
    <functioncall functionName="return_type"/>
    <functioncall functionName="rm"/>
    <functioncall functionName="rtos"/>
    <functioncall functionName="sint"/>
    <functioncall functionName="size"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="test"/>
    <functioncall functionName="token_debug"/>
    <functioncall functionName="true"/>
    <functioncall functionName="type"/>
    <functioncall functionName="types"/>
    <functioncall functionName="values"/>
    <functioncall functionName="while"/>
  </FileInfo>
</analyzerinfo>
