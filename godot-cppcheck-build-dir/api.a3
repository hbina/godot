<?xml version="1.0"?>
<analyzerinfo checksum="3044539087">
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="118" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="124" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="130" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="140" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="150" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="161" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="172" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="182" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="192" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="202" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="214" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="226" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="232" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="238" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="249" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="259" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="271" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="277" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="287" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="292" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="306" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="317" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="327" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="338" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="348" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="359" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="369" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="380" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="390" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="400" column="22"/>
        </error>
  <FileInfo check="ctu">
<function-call call-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:56:24" call-funcname="checkHandle" call-argnr="1" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="72" col="22" call-argexpr="obj" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="65" col="11" info="Assuming that condition 'obj' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:128:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="134" col="21" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:138:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="144" col="21" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:148:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="154" col="28" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:159:16" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="165" col="28" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:257:23" my-argnr="2" my-argname="type" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="263" col="46" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:300:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="311" col="24" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:315:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="321" col="21" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:325:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="331" col="28" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:336:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="342" col="21" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:346:16" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="352" col="28" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:357:17" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="363" col="21" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp:367:18" my-argnr="2" my-argname="name" file="/home/hbina/git/godot/thirdparty/oidn/core/api.cpp" line="373" col="28" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="checkHandle" lineNumber="56"/>
    <functiondecl functionName="oidnNewDevice" lineNumber="104"/>
    <functiondecl functionName="oidnRetainDevice" lineNumber="116"/>
    <functiondecl functionName="oidnReleaseDevice" lineNumber="122"/>
    <functiondecl functionName="oidnSetDevice1b" lineNumber="128"/>
    <functiondecl functionName="oidnSetDevice1i" lineNumber="138"/>
    <functiondecl functionName="oidnGetDevice1b" lineNumber="148"/>
    <functiondecl functionName="oidnGetDevice1i" lineNumber="159"/>
    <functiondecl functionName="oidnSetDeviceErrorFunction" lineNumber="170"/>
    <functiondecl functionName="oidnGetDeviceError" lineNumber="180"/>
    <functiondecl functionName="oidnCommitDevice" lineNumber="190"/>
    <functiondecl functionName="oidnNewBuffer" lineNumber="200"/>
    <functiondecl functionName="oidnNewSharedBuffer" lineNumber="212"/>
    <functiondecl functionName="oidnRetainBuffer" lineNumber="224"/>
    <functiondecl functionName="oidnReleaseBuffer" lineNumber="230"/>
    <functiondecl functionName="oidnMapBuffer" lineNumber="236"/>
    <functiondecl functionName="oidnUnmapBuffer" lineNumber="247"/>
    <functiondecl functionName="oidnNewFilter" lineNumber="257"/>
    <functiondecl functionName="oidnRetainFilter" lineNumber="269"/>
    <functiondecl functionName="oidnReleaseFilter" lineNumber="275"/>
    <functiondecl functionName="oidnSetFilterImage" lineNumber="281"/>
    <functiondecl functionName="oidnSetSharedFilterImage" lineNumber="300"/>
    <functiondecl functionName="oidnSetFilter1b" lineNumber="315"/>
    <functiondecl functionName="oidnGetFilter1b" lineNumber="325"/>
    <functiondecl functionName="oidnSetFilter1i" lineNumber="336"/>
    <functiondecl functionName="oidnGetFilter1i" lineNumber="346"/>
    <functiondecl functionName="oidnSetFilter1f" lineNumber="357"/>
    <functiondecl functionName="oidnGetFilter1f" lineNumber="367"/>
    <functiondecl functionName="oidnSetFilterProgressMonitorFunction" lineNumber="378"/>
    <functiondecl functionName="oidnCommitFilter" lineNumber="388"/>
    <functiondecl functionName="oidnExecuteFilter" lineNumber="398"/>
    <functioncall functionName="Buffer"/>
    <functioncall functionName="ErrorFunction"/>
    <functioncall functionName="Exception"/>
    <functioncall functionName="Format"/>
    <functioncall functionName="Image"/>
    <functioncall functionName="InvalidArgument"/>
    <functioncall functionName="None"/>
    <functioncall functionName="OIDNBuffer"/>
    <functioncall functionName="OIDNDevice"/>
    <functioncall functionName="OIDNError"/>
    <functioncall functionName="OIDNFilter"/>
    <functioncall functionName="OIhw16i16o"/>
    <functioncall functionName="OIhw8i8o"/>
    <functioncall functionName="OutOfMemory"/>
    <functioncall functionName="Undefined"/>
    <functioncall functionName="Unknown"/>
    <functioncall functionName="_mm_add_ss"/>
    <functioncall functionName="_mm_cvtss_f32"/>
    <functioncall functionName="_mm_mul_ss"/>
    <functioncall functionName="_mm_rcp_ss"/>
    <functioncall functionName="_mm_rsqrt_ss"/>
    <functioncall functionName="_mm_set_ss"/>
    <functioncall functionName="_mm_sub_ss"/>
    <functioncall functionName="a"/>
    <functioncall functionName="alignedFree"/>
    <functioncall functionName="alignedMalloc"/>
    <functioncall functionName="assert"/>
    <functioncall functionName="b"/>
    <functioncall functionName="buffer"/>
    <functioncall functionName="byteOffset"/>
    <functioncall functionName="bytePixelStride"/>
    <functioncall functionName="byteRowStride"/>
    <functioncall functionName="byteSize"/>
    <functioncall functionName="catch"/>
    <functioncall functionName="ceilDiv"/>
    <functioncall functionName="checkHandle"/>
    <functioncall functionName="clamp"/>
    <functioncall functionName="code"/>
    <functioncall functionName="commit"/>
    <functioncall functionName="d"/>
    <functioncall functionName="data"/>
    <functioncall functionName="data_type"/>
    <functioncall functionName="decRefKeep"/>
    <functioncall functionName="destroy"/>
    <functioncall functionName="detach"/>
    <functioncall functionName="device"/>
    <functioncall functionName="dims"/>
    <functioncall functionName="execute"/>
    <functioncall functionName="false"/>
    <functioncall functionName="filter"/>
    <functioncall functionName="float"/>
    <functioncall functionName="for"/>
    <functioncall functionName="format"/>
    <functioncall functionName="func"/>
    <functioncall functionName="get"/>
    <functioncall functionName="get1f"/>
    <functioncall functionName="get1i"/>
    <functioncall functionName="getDevice"/>
    <functioncall functionName="getError"/>
    <functioncall functionName="getFormatBytes"/>
    <functioncall functionName="getMutex"/>
    <functioncall functionName="getPadded"/>
    <functioncall functionName="getTensorDims"/>
    <functioncall functionName="getTensorSize"/>
    <functioncall functionName="get_desc"/>
    <functioncall functionName="hBuffer"/>
    <functioncall functionName="hDevice"/>
    <functioncall functionName="hFilter"/>
    <functioncall functionName="height"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="inBytePixelStride"/>
    <functioncall functionName="inByteRowStride"/>
    <functioncall functionName="incRef"/>
    <functioncall functionName="init"/>
    <functioncall functionName="int"/>
    <functioncall functionName="isfinite"/>
    <functioncall functionName="lock"/>
    <functioncall functionName="long"/>
    <functioncall functionName="makeRef"/>
    <functioncall functionName="map"/>
    <functioncall functionName="mappedPtr"/>
    <functioncall functionName="max"/>
    <functioncall functionName="maxValue"/>
    <functioncall functionName="mem"/>
    <functioncall functionName="message"/>
    <functioncall functionName="minValue"/>
    <functioncall functionName="nChw16c"/>
    <functioncall functionName="nChw8c"/>
    <functioncall functionName="name"/>
    <functioncall functionName="ndims"/>
    <functioncall functionName="newBuffer"/>
    <functioncall functionName="newFilter"/>
    <functioncall functionName="nullptr"/>
    <functioncall functionName="obj"/>
    <functioncall functionName="offset"/>
    <functioncall functionName="operatorbool"/>
    <functioncall functionName="outMessage"/>
    <functioncall functionName="pixelSize"/>
    <functioncall functionName="ptr"/>
    <functioncall functionName="r"/>
    <functioncall functionName="releaseObject"/>
    <functioncall functionName="retainObject"/>
    <functioncall functionName="return"/>
    <functioncall functionName="rowStride"/>
    <functioncall functionName="set1f"/>
    <functioncall functionName="set1i"/>
    <functioncall functionName="setError"/>
    <functioncall functionName="setErrorFunction"/>
    <functioncall functionName="setImage"/>
    <functioncall functionName="setProgressMonitorFunction"/>
    <functioncall functionName="shared"/>
    <functioncall functionName="size"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="true"/>
    <functioncall functionName="type"/>
    <functioncall functionName="unmap"/>
    <functioncall functionName="userPtr"/>
    <functioncall functionName="value"/>
    <functioncall functionName="what"/>
    <functioncall functionName="width"/>
    <functioncall functionName="x"/>
    <functioncall functionName="y"/>
  </FileInfo>
</analyzerinfo>
