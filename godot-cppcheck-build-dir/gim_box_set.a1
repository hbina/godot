<?xml version="1.0"?>
<analyzerinfo checksum="1421613745">
        <error id="CastAddressToIntegerAtReturn" severity="portability" msg="Returning an address value in a function with integer return type is not portable." verbose="Returning an address value in a function with integer (int/long/etc) return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit address down to 32-bit integer. The safe way is to always return an integer." cwe="758">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.h" line="152" column="3"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GIM_RSORT_TOKEN::m_key&apos; is not initialized in the constructor." verbose="Member variable &apos;GIM_RSORT_TOKEN::m_key&apos; is not initialized in the constructor." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="100" column="2"/>
            <symbol>GIM_RSORT_TOKEN::m_key</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GIM_RSORT_TOKEN::m_value&apos; is not initialized in the constructor." verbose="Member variable &apos;GIM_RSORT_TOKEN::m_value&apos; is not initialized in the constructor." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="100" column="2"/>
            <symbol>GIM_RSORT_TOKEN::m_value</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GIM_TRIANGLE_CONTACT_DATA::m_point_count&apos; is not initialized in the constructor." verbose="Member variable &apos;GIM_TRIANGLE_CONTACT_DATA::m_point_count&apos; is not initialized in the constructor." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_tri_collision.h" line="63" column="2"/>
            <symbol>GIM_TRIANGLE_CONTACT_DATA::m_point_count</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GIM_PAIR::m_index1&apos; is not initialized in the constructor." verbose="Member variable &apos;GIM_PAIR::m_index1&apos; is not initialized in the constructor." cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_pair.h" line="10" column="9"/>
            <symbol>GIM_PAIR::m_index1</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GIM_PAIR::m_index2&apos; is not initialized in the constructor." verbose="Member variable &apos;GIM_PAIR::m_index2&apos; is not initialized in the constructor." cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_pair.h" line="10" column="9"/>
            <symbol>GIM_PAIR::m_index2</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;less_comparator::operator()&apos; can be const." verbose="The member function &apos;less_comparator::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="45" column="13"/>
            <symbol>less_comparator::operator()</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;integer_comparator::operator()&apos; can be const." verbose="The member function &apos;integer_comparator::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="56" column="13"/>
            <symbol>integer_comparator::operator()</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;uint_key_func::operator()&apos; can be const." verbose="The member function &apos;uint_key_func::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="67" column="15"/>
            <symbol>uint_key_func::operator()</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;copy_elements_func::operator()&apos; can be const." verbose="The member function &apos;copy_elements_func::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="78" column="14"/>
            <symbol>copy_elements_func::operator()</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;memcopy_elements_func::operator()&apos; can be const." verbose="The member function &apos;memcopy_elements_func::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="89" column="14"/>
            <symbol>memcopy_elements_func::operator()</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GIM_RSORT_TOKEN_COMPARATOR::operator()&apos; can be const." verbose="The member function &apos;GIM_RSORT_TOKEN_COMPARATOR::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="124" column="13"/>
            <symbol>GIM_RSORT_TOKEN_COMPARATOR::operator()</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GIM_AABB::overlapping_trans_conservative&apos; can be const." verbose="The member function &apos;GIM_AABB::overlapping_trans_conservative&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="450" column="25"/>
            <symbol>GIM_AABB::overlapping_trans_conservative</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GIM_AABB::collide_plane&apos; can be const." verbose="The member function &apos;GIM_AABB::collide_plane&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="510" column="25"/>
            <symbol>GIM_AABB::collide_plane</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;DISTANCE_PLANE_3D_FUNC::operator()&apos; can be const." verbose="The member function &apos;DISTANCE_PLANE_3D_FUNC::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_clip_polygon.h" line="41" column="15"/>
            <symbol>DISTANCE_PLANE_3D_FUNC::operator()</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GIM_BOX_TREE::_sort_and_calc_splitting_index&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;GIM_BOX_TREE::_sort_and_calc_splitting_index&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.h" line="114" column="8"/>
            <location file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" line="63" column="21"/>
            <symbol>GIM_BOX_TREE::_sort_and_calc_splitting_index</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GIM_BOX_TREE::_calc_splitting_axis&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;GIM_BOX_TREE::_calc_splitting_axis&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.h" line="118" column="8"/>
            <location file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" line="33" column="21"/>
            <symbol>GIM_BOX_TREE::_calc_splitting_axis</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GIM_BOX_BOX_TRANSFORM_CACHE&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GIM_BOX_BOX_TRANSFORM_CACHE&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="153" column="2"/>
            <symbol>GIM_BOX_BOX_TRANSFORM_CACHE</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;gim_array &lt; GIM_PAIR &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;gim_array &lt; GIM_PAIR &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129" column="2"/>
            <symbol>gim_array &lt; GIM_PAIR &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;gim_array &lt; GIM_BOX_TREE_NODE &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;gim_array &lt; GIM_BOX_TREE_NODE &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129" column="2"/>
            <symbol>gim_array &lt; GIM_BOX_TREE_NODE &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;gim_array &lt; GIM_AABB_DATA &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;gim_array &lt; GIM_AABB_DATA &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129" column="2"/>
            <symbol>gim_array &lt; GIM_AABB_DATA &gt;</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="237" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="72" column="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="76" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tsum&apos; can be reduced." verbose="The scope of the variable &apos;tsum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="160" column="9"/>
            <symbol>tsum</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;_k&apos; can be reduced." verbose="The scope of the variable &apos;_k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="311" column="8"/>
            <symbol>_k</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="488" column="11"/>
            <symbol>m</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="488" column="14"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o&apos; can be reduced." verbose="The scope of the variable &apos;o&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="488" column="17"/>
            <symbol>o</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="488" column="20"/>
            <symbol>p</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;trans1_to_0&apos; can be declared with const" verbose="Parameter &apos;trans1_to_0&apos; can be declared with const" cwe="398">
            <location file0="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="450" column="90"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;primitive_boxes&apos; can be declared with const" verbose="Parameter &apos;primitive_boxes&apos; can be declared with const" cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" line="34" column="28"/>
        </error>
  <FileInfo check="ctu">
<function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:150:13" call-funcname="gim_swap_elements" call-argnr="2" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="379" col="20" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h:270:25" call-funcname="LINE_PLANE_COLLISION" call-argnr="1" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h" line="474" col="22" call-argexpr="_M" call-argvaluetype="7" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_clip_polygon.h:48:24" call-funcname="PLANE_CLIP_POLYGON_COLLECT" call-argnr="6" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_clip_polygon.h" line="147" col="28" call-argexpr="clipped_count" call-argvaluetype="0" call-argvalue="0">
  <path file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_clip_polygon.h" line="132" col="24" info="Assignment 'clipped_count=0', assigned value is 0"/>
</function-call><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.h:120:7" call-funcname="_build_sub_tree" call-argnr="2" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_box_set.cpp" line="175" col="17" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h:102:14" call-funcname="clear_range" call-argnr="1" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="113" col="14" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:120:13" call-funcname="gim_simd_memcpy" call-argnr="2" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="230" col="18" call-argexpr="&obj" call-argvaluetype="7" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h:102:14" call-funcname="clear_range" call-argnr="1" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="113" col="14" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:120:13" call-funcname="gim_simd_memcpy" call-argnr="2" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="230" col="18" call-argexpr="&obj" call-argvaluetype="7" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h:102:14" call-funcname="clear_range" call-argnr="1" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="113" col="14" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:120:13" call-funcname="gim_simd_memcpy" call-argnr="2" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="230" col="18" call-argexpr="&obj" call-argvaluetype="7" call-argvalue="0"/><function-call call-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_tri_collision.h:74:25" call-funcname="mergepoints_generic" call-argnr="3" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_tri_collision.h" line="115" col="3" my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_tri_collision.h:111:25" my-argnr="3"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <array-index>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h:513:24" my-argnr="2" my-argname="order_indices" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h" line="518" col="2" value="0"/>
    </array-index>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:120:13" my-argnr="1" my-argname="dst" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h" line="145" col="9" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:120:13" my-argnr="2" my-argname="src" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h" line="145" col="14" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:150:13" my-argnr="1" my-argname="_array" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h" line="152" col="14" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h:513:24" my-argnr="1" my-argname="values" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h" line="518" col="21" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h:513:24" my-argnr="2" my-argname="order_indices" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h" line="518" col="2" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_clip_polygon.h:76:25" my-argnr="2" my-argname="polygon_points" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_clip_polygon.h" line="85" col="41" value="0"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h:120:13" my-argnr="2" my-argname="src" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_memory.h" line="145" col="14" value="0"/>
    <unsafe-usage my-id="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h:513:24" my-argnr="1" my-argname="values" file="/home/hbina/git/godot/thirdparty/bullet/BulletCollision/Gimpact/gim_basic_geometry_operations.h" line="518" col="21" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="_calc_splitting_axis" lineNumber="33"/>
    <functiondecl functionName="_sort_and_calc_splitting_index" lineNumber="63"/>
    <functiondecl functionName="_build_sub_tree" lineNumber="115"/>
    <functiondecl functionName="build_tree" lineNumber="167"/>
    <functioncall functionName="CLASS_PLANE"/>
    <functioncall functionName="CLOSEST_POINT_ON_SEGMENT"/>
    <functioncall functionName="CompareFunc"/>
    <functioncall functionName="DISTANCE_PLANE_3D_FUNC"/>
    <functioncall functionName="Dx"/>
    <functioncall functionName="Dy"/>
    <functioncall functionName="Dz"/>
    <functioncall functionName="FLT_MAX"/>
    <functioncall functionName="GIM_AABB"/>
    <functioncall functionName="GIM_AABB_DATA"/>
    <functioncall functionName="GIM_BOX_BOX_TRANSFORM_CACHE"/>
    <functioncall functionName="GIM_BOX_TREE"/>
    <functioncall functionName="GIM_BOX_TREE_NODE"/>
    <functioncall functionName="GIM_PAIR"/>
    <functioncall functionName="GIM_RSORT_TOKEN"/>
    <functioncall functionName="GIM_TRIANGLE"/>
    <functioncall functionName="GIM_TRIANGLE_CONTACT_DATA"/>
    <functioncall functionName="G_BACK_PLANE_S1"/>
    <functioncall functionName="G_BACK_PLANE_S2"/>
    <functioncall functionName="G_COLLIDE_PLANE"/>
    <functioncall functionName="G_COLLIDE_PLANE_S1"/>
    <functioncall functionName="G_COLLIDE_PLANE_S2"/>
    <functioncall functionName="G_FRONT_PLANE"/>
    <functioncall functionName="G_FRONT_PLANE_S2"/>
    <functioncall functionName="G_STYPE_INT"/>
    <functioncall functionName="G_STYPE_INT64"/>
    <functioncall functionName="G_STYPE_REAL2"/>
    <functioncall functionName="G_STYPE_SHORT"/>
    <functioncall functionName="G_STYPE_UINT"/>
    <functioncall functionName="G_STYPE_UINT64"/>
    <functioncall functionName="G_STYPE_USHORT"/>
    <functioncall functionName="LINE_PLANE_COLLISION"/>
    <functioncall functionName="NULL"/>
    <functioncall functionName="PLANE_CLIP_POLYGON_COLLECT"/>
    <functioncall functionName="PLANE_CLIP_POLYGON_GENERIC"/>
    <functioncall functionName="PLANE_CLIP_SEGMENT2"/>
    <functioncall functionName="PLANE_CLIP_TRIANGLE_GENERIC"/>
    <functioncall functionName="SIMD_EPSILON"/>
    <functioncall functionName="SIZE"/>
    <functioncall functionName="T"/>
    <functioncall functionName="_AD"/>
    <functioncall functionName="_BD"/>
    <functioncall functionName="_M"/>
    <functioncall functionName="_build_sub_tree"/>
    <functioncall functionName="_calc_splitting_axis"/>
    <functioncall functionName="_classif"/>
    <functioncall functionName="_dif"/>
    <functioncall functionName="_dif1"/>
    <functioncall functionName="_dif2"/>
    <functioncall functionName="_dis"/>
    <functioncall functionName="_dis1"/>
    <functioncall functionName="_dis2"/>
    <functioncall functionName="_dist"/>
    <functioncall functionName="_dotdir"/>
    <functioncall functionName="_e_tmp_"/>
    <functioncall functionName="_fMaximumExtent"/>
    <functioncall functionName="_fmax"/>
    <functioncall functionName="_fmin"/>
    <functioncall functionName="_i"/>
    <functioncall functionName="_i1"/>
    <functioncall functionName="_i2"/>
    <functioncall functionName="_j"/>
    <functioncall functionName="_k"/>
    <functioncall functionName="_n"/>
    <functioncall functionName="_original_array"/>
    <functioncall functionName="_pp"/>
    <functioncall functionName="_scalar"/>
    <functioncall functionName="_sort_and_calc_splitting_index"/>
    <functioncall functionName="_sorted"/>
    <functioncall functionName="_start_i"/>
    <functioncall functionName="_tp"/>
    <functioncall functionName="_y"/>
    <functioncall functionName="a"/>
    <functioncall functionName="a0"/>
    <functioncall functionName="a1"/>
    <functioncall functionName="absolute"/>
    <functioncall functionName="appy_transform"/>
    <functioncall functionName="array"/>
    <functioncall functionName="b"/>
    <functioncall functionName="blendfactor"/>
    <functioncall functionName="bound"/>
    <functioncall functionName="box"/>
    <functioncall functionName="boxu"/>
    <functioncall functionName="boxv"/>
    <functioncall functionName="break"/>
    <functioncall functionName="btAssert"/>
    <functioncall functionName="btFabs"/>
    <functioncall functionName="btScalar"/>
    <functioncall functionName="ca"/>
    <functioncall functionName="calc_absolute_matrix"/>
    <functioncall functionName="call_constructor"/>
    <functioncall functionName="cb"/>
    <functioncall functionName="center"/>
    <functioncall functionName="clear"/>
    <functioncall functionName="clear_memory"/>
    <functioncall functionName="clear_range"/>
    <functioncall functionName="clipped"/>
    <functioncall functionName="clipped1"/>
    <functioncall functionName="clipped2"/>
    <functioncall functionName="clipped_count"/>
    <functioncall functionName="closestAxis"/>
    <functioncall functionName="collide_plane"/>
    <functioncall functionName="collide_triangle_hard_test"/>
    <functioncall functionName="const"/>
    <functioncall functionName="contact_data"/>
    <functioncall functionName="copy_elements_macro"/>
    <functioncall functionName="copy_from"/>
    <functioncall functionName="copysize"/>
    <functioncall functionName="cp"/>
    <functioncall functionName="cross"/>
    <functioncall functionName="current_index"/>
    <functioncall functionName="d"/>
    <functioncall functionName="destroyData"/>
    <functioncall functionName="det"/>
    <functioncall functionName="dif1"/>
    <functioncall functionName="dif2"/>
    <functioncall functionName="diff"/>
    <functioncall functionName="dir"/>
    <functioncall functionName="dir1"/>
    <functioncall functionName="dir2"/>
    <functioncall functionName="dist"/>
    <functioncall functionName="dist0"/>
    <functioncall functionName="dist1"/>
    <functioncall functionName="distance_func"/>
    <functioncall functionName="dot"/>
    <functioncall functionName="dot3"/>
    <functioncall functionName="dst"/>
    <functioncall functionName="e0"/>
    <functioncall functionName="e1"/>
    <functioncall functionName="e2"/>
    <functioncall functionName="ea"/>
    <functioncall functionName="eb"/>
    <functioncall functionName="edge_index"/>
    <functioncall functionName="edge_plane"/>
    <functioncall functionName="element_count"/>
    <functioncall functionName="endIndex"/>
    <functioncall functionName="erase_sorted_mem"/>
    <functioncall functionName="extends"/>
    <functioncall functionName="extents"/>
    <functioncall functionName="f"/>
    <functioncall functionName="faceplane"/>
    <functioncall functionName="false"/>
    <functioncall functionName="fillData"/>
    <functioncall functionName="firstdist"/>
    <functioncall functionName="for"/>
    <functioncall functionName="fulltest"/>
    <functioncall functionName="getBasis"/>
    <functioncall functionName="getOrigin"/>
    <functioncall functionName="getRow"/>
    <functioncall functionName="get_center_extend"/>
    <functioncall functionName="get_edge_plane"/>
    <functioncall functionName="get_normal"/>
    <functioncall functionName="get_uintkey_macro"/>
    <functioncall functionName="gim_alloc"/>
    <functioncall functionName="gim_array &lt; GIM_AABB_DATA &gt;"/>
    <functioncall functionName="gim_array &lt; GIM_BOX_TREE_NODE &gt;"/>
    <functioncall functionName="gim_array &lt; GIM_PAIR &gt;"/>
    <functioncall functionName="gim_down_heap"/>
    <functioncall functionName="gim_free"/>
    <functioncall functionName="gim_radix_sort_array_tokens"/>
    <functioncall functionName="gim_realloc"/>
    <functioncall functionName="gim_simd_memcpy"/>
    <functioncall functionName="gim_swap_elements"/>
    <functioncall functionName="growingCheck"/>
    <functioncall functionName="has_collision"/>
    <functioncall functionName="i"/>
    <functioncall functionName="i0"/>
    <functioncall functionName="i1"/>
    <functioncall functionName="if"/>
    <functioncall functionName="index"/>
    <functioncall functionName="index1"/>
    <functioncall functionName="index2"/>
    <functioncall functionName="insert_mem"/>
    <functioncall functionName="int"/>
    <functioncall functionName="intersection_type"/>
    <functioncall functionName="invalidate"/>
    <functioncall functionName="inverse"/>
    <functioncall functionName="is_leaf_node"/>
    <functioncall functionName="is_point_inside"/>
    <functioncall functionName="j"/>
    <functioncall functionName="k"/>
    <functioncall functionName="m"/>
    <functioncall functionName="m_T1to0"/>
    <functioncall functionName="m_allocated_size"/>
    <functioncall functionName="m_bound"/>
    <functioncall functionName="m_data"/>
    <functioncall functionName="m_escapeIndex"/>
    <functioncall functionName="m_index1"/>
    <functioncall functionName="m_index2"/>
    <functioncall functionName="m_key"/>
    <functioncall functionName="m_left"/>
    <functioncall functionName="m_margin"/>
    <functioncall functionName="m_max"/>
    <functioncall functionName="m_min"/>
    <functioncall functionName="m_num_nodes"/>
    <functioncall functionName="m_penetration_depth"/>
    <functioncall functionName="m_point_count"/>
    <functioncall functionName="m_right"/>
    <functioncall functionName="m_separating_normal"/>
    <functioncall functionName="m_size"/>
    <functioncall functionName="m_value"/>
    <functioncall functionName="margin"/>
    <functioncall functionName="maxAxis"/>
    <functioncall functionName="means"/>
    <functioncall functionName="memcpy"/>
    <functioncall functionName="merge"/>
    <functioncall functionName="mergepoints_generic"/>
    <functioncall functionName="n"/>
    <functioncall functionName="newsize"/>
    <functioncall functionName="nodeindex"/>
    <functioncall functionName="normal"/>
    <functioncall functionName="numIndices"/>
    <functioncall functionName="o"/>
    <functioncall functionName="obj"/>
    <functioncall functionName="olddist"/>
    <functioncall functionName="other"/>
    <functioncall functionName="p"/>
    <functioncall functionName="p1"/>
    <functioncall functionName="p1p2"/>
    <functioncall functionName="p2"/>
    <functioncall functionName="pArr"/>
    <functioncall functionName="plane"/>
    <functioncall functionName="plane_classify"/>
    <functioncall functionName="pmax"/>
    <functioncall functionName="pmin"/>
    <functioncall functionName="point"/>
    <functioncall functionName="point0"/>
    <functioncall functionName="point1"/>
    <functioncall functionName="point2"/>
    <functioncall functionName="point_count"/>
    <functioncall functionName="points"/>
    <functioncall functionName="polygon_point_count"/>
    <functioncall functionName="polygon_points"/>
    <functioncall functionName="pop_back"/>
    <functioncall functionName="pos"/>
    <functioncall functionName="pout"/>
    <functioncall functionName="primitive_boxes"/>
    <functioncall functionName="projection_interval"/>
    <functioncall functionName="public:"/>
    <functioncall functionName="push_back"/>
    <functioncall functionName="q"/>
    <functioncall functionName="r"/>
    <functioncall functionName="rad"/>
    <functioncall functionName="rangeBalancedIndices"/>
    <functioncall functionName="reserve"/>
    <functioncall functionName="reservesize"/>
    <functioncall functionName="resize"/>
    <functioncall functionName="resizeData"/>
    <functioncall functionName="return"/>
    <functioncall functionName="s1"/>
    <functioncall functionName="s2"/>
    <functioncall functionName="setOrigin"/>
    <functioncall functionName="setValue"/>
    <functioncall functionName="size"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="splitAxis"/>
    <functioncall functionName="splitIndex"/>
    <functioncall functionName="src"/>
    <functioncall functionName="startIndex"/>
    <functioncall functionName="sum0"/>
    <functioncall functionName="sum1"/>
    <functioncall functionName="sum2"/>
    <functioncall functionName="swap"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="t"/>
    <functioncall functionName="t2"/>
    <functioncall functionName="tbox"/>
    <functioncall functionName="textends"/>
    <functioncall functionName="tfirst"/>
    <functioncall functionName="tlast"/>
    <functioncall functionName="tmax"/>
    <functioncall functionName="tmin"/>
    <functioncall functionName="tparam"/>
    <functioncall functionName="trans"/>
    <functioncall functionName="trans1_to_0"/>
    <functioncall functionName="transpose"/>
    <functioncall functionName="tri_normal"/>
    <functioncall functionName="triangle_normal"/>
    <functioncall functionName="triangle_plane"/>
    <functioncall functionName="true"/>
    <functioncall functionName="tsum"/>
    <functioncall functionName="unbalanced"/>
    <functioncall functionName="v"/>
    <functioncall functionName="v1"/>
    <functioncall functionName="v2"/>
    <functioncall functionName="v3"/>
    <functioncall functionName="vA1"/>
    <functioncall functionName="vA2"/>
    <functioncall functionName="vB1"/>
    <functioncall functionName="vB2"/>
    <functioncall functionName="vDir"/>
    <functioncall functionName="vPoint"/>
    <functioncall functionName="vPointA"/>
    <functioncall functionName="vPointB"/>
    <functioncall functionName="variance"/>
    <functioncall functionName="vepsi"/>
    <functioncall functionName="while"/>
    <functioncall functionName="xaxis"/>
    <functioncall functionName="zaxis"/>
  </FileInfo>
</analyzerinfo>
