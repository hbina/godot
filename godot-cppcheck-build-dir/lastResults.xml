<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;MethodDefinition&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;MethodDefinition&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/class_db.h" line="55"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;MethodDefinition&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;MethodDefinition&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/class_db.h" line="57"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PropertyInfo&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PropertyInfo&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/object.h" line="179"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;MethodInfo&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;MethodInfo&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/object.h" line="218"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;MethodInfo&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;MethodInfo&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/object.h" line="224"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Connection&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Connection&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/object.h" line="427"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/object.h" line="569"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Object&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Object&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/object.h" line="499"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Callable&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Callable&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/callable.h" line="101"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Ref &amp;lt; Reference &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Ref &amp;lt; Reference &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/reference.h" line="198"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Ref &amp;lt; Reference &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Ref &amp;lt; Reference &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/reference.h" line="212"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Ref &amp;lt; Reference &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Ref &amp;lt; Reference &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/reference.h" line="219"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Ref &amp;lt; Script &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Ref &amp;lt; Script &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/reference.h" line="198"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Ref &amp;lt; Script &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Ref &amp;lt; Script &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/reference.h" line="212"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Ref &amp;lt; Script &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Ref &amp;lt; Script &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/reference.h" line="219"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/reference.h" line="297"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;NodePath&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;NodePath&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/node_path.h" line="95"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/packed_data_container.cpp" line="107"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolAllocator&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolAllocator&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/pool_allocator.h" line="144"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/pool_allocator.cpp" line="448"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/object.cpp" line="2046"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;_ObjectDebugLock&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;_ObjectDebugLock&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/object.cpp" line="48"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/resource.cpp" line="226"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/method_bind.gen.inc" line="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/method_bind.gen.inc" line="394"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/method_bind.gen.inc" line="65"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/method_bind.gen.inc" line="421"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;display&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;display&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="core/script_language.h" line="266"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;insert_text&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;insert_text&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="core/script_language.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/string_name.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/string_name.h" line="159"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/string_name.h" line="161"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StringName&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/string_name.h" line="162"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="50"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="53"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; bool &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; bool &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="81"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; uint8_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; uint8_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="82"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; int8_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; int8_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="83"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; uint16_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; uint16_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="84"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; int16_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; int16_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="85"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; uint32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; uint32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="86"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; int32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; int32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="87"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; uint64_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; uint64_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="88"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; int64_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; int64_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; double &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; double &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="91"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; String &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; String &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="92"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector2 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector2 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="93"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector2i &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector2i &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="94"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Rect2 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Rect2 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Rect2i &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Rect2i &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="96"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector3 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector3 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector3i &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector3i &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="98"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Transform2D &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Transform2D &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="99"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Plane &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Plane &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="100"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Quat &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Quat &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="101"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; AABB &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; AABB &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Basis &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Basis &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="103"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Transform &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Transform &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="104"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Color &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Color &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="105"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; StringName &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; StringName &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="106"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; NodePath &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; NodePath &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="107"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; RID &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; RID &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="108"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Callable &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Callable &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="109"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Signal &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Signal &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="110"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Dictionary &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Dictionary &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="111"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Array &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Array &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="112"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; uint8_t &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; uint8_t &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="113"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; int32_t &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; int32_t &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="114"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; int64_t &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; int64_t &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="115"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; float &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; float &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="116"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; double &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; double &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="117"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; String &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; String &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="118"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; Vector2 &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; Vector2 &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="119"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; Vector3 &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; Vector3 &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="120"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; Color &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TypedArray &amp;lt; Vector &amp;lt; Color &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/typed_array.h" line="121"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CharString&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CharString&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/ustring.h" line="100"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;String&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;String&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/ustring.h" line="364"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;String&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;String&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/ustring.h" line="365"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;String&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;String&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/ustring.h" line="366"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="306"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="307"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="308"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="314"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="315"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="316"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="317"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="318"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="319"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="320"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="321"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="322"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="323"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="324"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="325"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="326"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="327"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="328"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="329"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="330"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="331"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="332"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="333"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="334"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="335"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="336"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="337"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="338"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="339"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="340"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="341"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="342"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="343"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="344"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="345"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="347"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="348"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="349"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="350"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="351"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="352"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="353"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="354"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="355"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="356"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="357"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="359"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="360"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="361"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="362"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="364"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; uint8_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; uint8_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; int32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; int32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; int64_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; int64_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; double &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; double &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; String &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; String &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; Vector2 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; Vector2 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; Vector3 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; Vector3 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PackedArrayRef &amp;lt; Color &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PackedArrayRef &amp;lt; Color &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="310"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Variant&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/variant.h" line="311"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/variant_call.cpp" line="1445"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/local_debugger.cpp" line="403"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/local_debugger.cpp" line="407"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PerformanceProfiler&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PerformanceProfiler&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger.cpp" line="398"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger.cpp" line="443"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger.cpp" line="461"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger.cpp" line="925"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger.cpp" line="930"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RemoteDebugger&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RemoteDebugger&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger.h" line="119"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/debugger/remote_debugger_peer.cpp" line="198"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;factor&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;factor&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="1240"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;delta&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;delta&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="1284"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="49"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="55"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="62"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="70"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/input/input_event.cpp" line="86"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/io/file_access_network.cpp" line="180"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;PathMD5&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;PathMD5&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/io/file_access_pack.h" line="90"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/io/ip.cpp" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;IP_Address&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;IP_Address&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/io/ip_address.h" line="86"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RotatedFileLogger&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RotatedFileLogger&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/io/logger.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CompositeLogger&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CompositeLogger&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/io/logger.h" line="100"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="core/io/resource_loader.cpp" line="223"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;AudioFrame&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;AudioFrame&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/math/audio_frame.h" line="136"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;CameraMatrix&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;CameraMatrix&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/math/camera_matrix.h" line="113"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Quat&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Quat&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/math/quat.h" line="123"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;basis&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;basis&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="core/math/transform.cpp" line="223"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Transform&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Transform&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/math/transform.h" line="112"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Vector2i&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Vector2i&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/math/vector2.h" line="310"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Vector3&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Vector3&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/math/vector3.h" line="155"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;DirAccessRef&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;DirAccessRef&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/os/dir_access.h" line="146"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;FileAccessRef&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;FileAccessRef&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/os/file_access.h" line="193"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RWLockRead&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RWLockRead&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/os/rw_lock.h" line="59"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RWLockWrite&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RWLockWrite&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="core/os/rw_lock.h" line="75"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="165"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/alsamidi/midi_driver_alsamidi.cpp" line="76"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/coreaudio/audio_driver_coreaudio.cpp" line="172"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/coreaudio/audio_driver_coreaudio.cpp" line="217"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/coreaudio/audio_driver_coreaudio.cpp" line="45"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/coreaudio/audio_driver_coreaudio.cpp" line="59"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/gles2/shader_gles2.h" line="121"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;vert_id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;vert_id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/gles2/shader_gles2.h" line="122"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;frag_id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;frag_id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/gles2/shader_gles2.h" line="123"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="57"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="69"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="83"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="328"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="542"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="741"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;buffer&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;buffer&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="214"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;allocation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;allocation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="215"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;descriptor_set&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;descriptor_set&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="736"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pipeline_layout&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pipeline_layout&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="752"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;descriptor_set&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;descriptor_set&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="852"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pipeline_layout&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pipeline_layout&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="868"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;vertex_format&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;vertex_format&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="789"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;framebuffer_format&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;framebuffer_format&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="792"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pipeline_vertex_format&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pipeline_vertex_format&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/rendering_device_vulkan.h" line="801"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;render_pass&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;render_pass&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/vulkan_context.h" line="100"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;surface&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;surface&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/vulkan_context.h" line="102"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;swapchain&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;swapchain&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/vulkan_context.h" line="104"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;presentMode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;presentMode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/vulkan/vulkan_context.h" line="106"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/wasapi/audio_driver_wasapi.cpp" line="556"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;wave_format&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;wave_format&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="drivers/xaudio2/audio_driver_xaudio2.cpp" line="202"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="drivers/xaudio2/audio_driver_xaudio2.cpp" line="89"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_node.h" line="549"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/audio_stream_preview.cpp" line="105"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ConnectionData&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ConnectionData&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/connections_dialog.h" line="67"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ScriptEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ScriptEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/script_editor_plugin.h" line="452"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ScriptEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ScriptEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/script_editor_plugin.h" line="484"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;DependencyEditorOwners&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;DependencyEditorOwners&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/dependency_editor.h" line="94"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ProjectSettingsEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ProjectSettingsEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/project_settings_editor.h" line="206"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;AudioBusesEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;AudioBusesEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/editor_audio_buses.h" line="280"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;notch_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;notch_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/editor_audio_buses.cpp" line="1489"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FileSystemDock&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FileSystemDock&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/filesystem_dock.h" line="307"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_export.cpp" line="320"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_export.cpp" line="355"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_export.cpp" line="918"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_file_system.cpp" line="338"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_file_system.cpp" line="1049"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_log.cpp" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_log.cpp" line="137"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_node.cpp" line="3582"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_node.cpp" line="3973"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_node.cpp" line="5501"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;EditorPath&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;EditorPath&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/editor_path.h" line="57"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CanvasItemEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CanvasItemEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/canvas_item_editor_plugin.h" line="650"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CanvasItemEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CanvasItemEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/canvas_item_editor_plugin.h" line="671"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Node3DEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Node3DEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="817"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Node3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Node3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/node_3d_editor_plugin.h" line="847"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_properties.cpp" line="2460"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/editor_resource_preview.cpp" line="106"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/find_in_files.cpp" line="457"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/find_in_files.cpp" line="496"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pos3d_mesh&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pos3d_mesh&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/node_3d_editor_gizmos.cpp" line="1570"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RenameDialog&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RenameDialog&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/rename_dialog.h" line="113"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/rename_dialog.cpp" line="478"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;source&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;source&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/debugger/editor_debugger_node.h" line="83"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/fileserver/editor_file_server.cpp" line="58"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/fileserver/editor_file_server.cpp" line="276"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;channel_for_roughness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;channel_for_roughness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/import/resource_importer_texture.h" line="69"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Vertex&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Vertex&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/abstract_polygon_2d_editor.h" line="51"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;AnimationPlayerEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;AnimationPlayerEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/animation_player_editor_plugin.h" line="268"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;AnimationTreeEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;AnimationTreeEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/animation_tree_editor_plugin.h" line="112"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;AudioStreamEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;AudioStreamEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/audio_stream_editor_plugin.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;AssetLibraryEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;AssetLibraryEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/asset_library_editor_plugin.h" line="325"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Camera3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Camera3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/camera_3d_editor_plugin.h" line="71"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CollisionPolygon2DEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CollisionPolygon2DEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/collision_polygon_2d_editor_plugin.h" line="48"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CollisionPolygon2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CollisionPolygon2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/collision_polygon_2d_editor_plugin.h" line="56"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CollisionPolygon3DEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CollisionPolygon3DEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/collision_polygon_3d_editor_plugin.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Polygon3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Polygon3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/collision_polygon_3d_editor_plugin.h" line="115"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CollisionShape2DEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CollisionShape2DEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/collision_shape_2d_editor_plugin.h" line="83"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CollisionShape2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CollisionShape2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/collision_shape_2d_editor_plugin.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CPUParticles2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CPUParticles2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/cpu_particles_2d_editor_plugin.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CPUParticles3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CPUParticles3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/cpu_particles_3d_editor_plugin.h" line="81"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;default_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;default_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="6274"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="962"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/plugins/canvas_item_editor_plugin.cpp" line="4588"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CurveEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CurveEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/curve_editor_plugin.h" line="134"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GIProbeEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GIProbeEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/gi_probe_editor_plugin.h" line="71"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;scenario&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;scenario&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="361"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;scenario&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;scenario&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="762"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;viewport&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;viewport&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/editor_preview_plugins.cpp" line="894"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GPUParticles2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GPUParticles2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/gpu_particles_2d_editor_plugin.h" line="96"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GPUParticles3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GPUParticles3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/gpu_particles_3d_editor_plugin.h" line="117"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;viewport_environment&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;viewport_environment&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/node_3d_editor_plugin.cpp" line="6063"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;current_theme&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;current_theme&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/script_editor_plugin.cpp" line="3067"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ShaderFileEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ShaderFileEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/shader_file_editor_plugin.h" line="70"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ShaderFileEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ShaderFileEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/shader_file_editor_plugin.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Skeleton2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Skeleton2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/skeleton_2d_editor_plugin.h" line="81"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Skeleton3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Skeleton3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/skeleton_3d_editor_plugin.h" line="92"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SkeletonIK3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SkeletonIK3DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/skeleton_ik_3d_editor_plugin.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Sprite2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Sprite2DEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/sprite_2d_editor_plugin.h" line="113"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SpriteFramesEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SpriteFramesEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/sprite_frames_editor_plugin.h" line="151"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StyleBoxEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StyleBoxEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/style_box_editor_plugin.h" line="76"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TextureEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TextureEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/texture_editor_plugin.h" line="71"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;obj_styleBox&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;obj_styleBox&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/texture_region_editor_plugin.cpp" line="902"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;atlas_tex&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;atlas_tex&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/texture_region_editor_plugin.cpp" line="903"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TextureRegionEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TextureRegionEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/texture_region_editor_plugin.h" line="142"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TextureRegionEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TextureRegionEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/texture_region_editor_plugin.h" line="167"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ThemeEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ThemeEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/theme_editor_plugin.h" line="116"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;manual_position&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;manual_position&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/tile_map_editor_plugin.cpp" line="1908"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TileMapEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TileMapEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/tile_map_editor_plugin.h" line="228"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TileMapEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TileMapEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/tile_map_editor_plugin.h" line="251"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TileSetEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TileSetEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/tile_set_editor_plugin.h" line="191"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TilesetEditorContext&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TilesetEditorContext&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/tile_set_editor_plugin.h" line="277"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TileSetEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TileSetEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/tile_set_editor_plugin.h" line="297"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="editor/plugins/script_text_editor.cpp" line="819"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;KinematicUtilities&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;KinematicUtilities&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/rigid_body_bullet.h" line="178"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;BulletPhysicsDirectSpaceState&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;BulletPhysicsDirectSpaceState&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/space_bullet.h" line="77"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/bullet/collision_object_bullet.cpp" line="64"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GodotCollisionConfiguration&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GodotCollisionConfiguration&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/godot_collision_configuration.h" line="48"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GodotSoftCollisionConfiguration&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GodotSoftCollisionConfiguration&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/godot_collision_configuration.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;CreateFunc&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;CreateFunc&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/godot_ray_world_algorithm.h" line="66"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;SwappedCreateFunc&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;SwappedCreateFunc&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/godot_ray_world_algorithm.h" line="77"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GodotCollisionDispatcher&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GodotCollisionDispatcher&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/godot_collision_dispatcher.h" line="48"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;saved_node_pos&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;saved_node_pos&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="editor/plugins/visual_shader_editor_plugin.cpp" line="2334"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;VisualShaderEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;VisualShaderEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="editor/plugins/visual_shader_editor_plugin.h" line="309"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GodotMotionState&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GodotMotionState&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/bullet/godot_motion_state.h" line="58"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bounds&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bounds&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/bullet/space_bullet.cpp" line="1118"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;EditorPluginCSG&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;EditorPluginCSG&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/csg/csg_gizmos.h" line="61"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;transfer_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;transfer_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/enet/networked_multiplayer_enet.cpp" line="914"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;connection_status&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;connection_status&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/enet/networked_multiplayer_enet.cpp" line="918"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bind_ip&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bind_ip&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/enet/networked_multiplayer_enet.cpp" line="925"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/enet/networked_multiplayer_enet.cpp" line="690"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/enet/networked_multiplayer_enet.cpp" line="743"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GDNativeLibraryEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GDNativeLibraryEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnative/gdnative_library_editor_plugin.h" line="111"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/godot_nativescript.cpp" line="215"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/gdnative/net/multiplayer_peer_gdnative.cpp" line="124"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/gdnative/net/packet_peer_gdnative.cpp" line="71"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;library&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;library&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="785"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;lib_path&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;lib_path&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="786"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;class_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;class_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="787"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_init_call_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_init_call_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1244"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_init_call_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_init_call_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1245"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_terminate_call_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_terminate_call_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1246"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_noarg_call_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_noarg_call_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1247"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_frame_call_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_frame_call_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1248"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_thread_enter_call_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_thread_enter_call_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1250"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_thread_exit_call_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_thread_exit_call_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="1251"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="191"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/gdnative/nativescript/nativescript.cpp" line="766"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/gdnative/net/stream_peer_gdnative.cpp" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ResourceFormatLoaderPluginScript&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ResourceFormatLoaderPluginScript&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnative/pluginscript/pluginscript_loader.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ResourceFormatSaverPluginScript&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ResourceFormatSaverPluginScript&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnative/pluginscript/pluginscript_loader.h" line="58"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PluginScriptLanguage&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PluginScriptLanguage&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnative/pluginscript/pluginscript_language.h" line="128"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;VideoDecoderGDNative&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;VideoDecoderGDNative&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnative/videodecoder/video_stream_gdnative.h" line="48"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;NavigationPoly&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;NavigationPoly&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnavigation/nav_utils.h" line="142"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;free_command&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;free_command&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnavigation/gd_navigation_server.cpp" line="414"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;NavigationMeshEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;NavigationMeshEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdnavigation/navigation_mesh_editor_plugin.h" line="83"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rpc_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rpc_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdscript/gdscript_parser.h" line="231"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdscript/gdscript.cpp" line="48"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GDScriptNativeClass&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GDScriptNativeClass&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gdscript/gdscript.h" line="55"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rpc_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rpc_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdscript/gdscript_function.cpp" line="1772"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gdscript/gdscript_function.cpp" line="1773"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cell_size&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cell_size&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/gridmap/grid_map.cpp" line="1096"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GridMapEditor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GridMapEditor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GridMapEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GridMapEditorPlugin&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="271"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mbedtls/packet_peer_mbed_dtls.cpp" line="60"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mbedtls/stream_peer_mbedtls.cpp" line="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mbedtls/stream_peer_mbedtls.cpp" line="61"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;intraocular_dist&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;intraocular_dist&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="456"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;display_width&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;display_width&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="457"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;display_to_lens&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;display_to_lens&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="458"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;oversample&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;oversample&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="459"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;k1&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;k1&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="460"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;k2&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;k2&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mobile_vr/mobile_vr_interface.cpp" line="461"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;namespace_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;namespace_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_assembly.h" line="63"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;class_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;class_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_assembly.h" line="64"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;res_data_dir&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;res_data_dir&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/godotsharp_dirs.cpp" line="126"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ScopeDomain&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ScopeDomain&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono.h" line="263"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ScopeExitDomainUnload&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ScopeExitDomainUnload&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono.h" line="283"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;MonoGCHandleRef&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;MonoGCHandleRef&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gc_handle.h" line="107"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ManagedCallable&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ManagedCallable&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/managed_callable.h" line="73"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CSharpInstance&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CSharpInstance&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/csharp_script.h" line="325"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_class.h" line="63"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_signal_callback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_signal_callback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/csharp_script.cpp" line="3817"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="54"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;proxy_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;proxy_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="55"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cname&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cname&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="71"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;api_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;api_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="487"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;c_arg_in&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;c_arg_in&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="499"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="515"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;im_type_out&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;im_type_out&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="516"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;im_sig&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;im_sig&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="517"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;unique_sig&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;unique_sig&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="518"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="523"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;im_type_out&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;im_type_out&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="524"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;im_sig&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;im_sig&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="525"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;unique_sig&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;unique_sig&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="526"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type_void&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type_void&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="586"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;EnumInterface&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;EnumInterface&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="70"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;TypeReference&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;TypeReference&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/mono/editor/bindings_generator.h" line="94"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;namespace_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;namespace_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_class.cpp" line="504"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;class_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;class_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_class.cpp" line="505"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_method.cpp" line="278"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1343"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1364"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1382"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1403"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1421"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/mono/mono_gd/gd_mono_marshal.cpp" line="1442"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;size&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;size&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/opensimplex/noise_texture.cpp" line="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/opensimplex/noise_texture.cpp" line="125"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/pvr/texture_loader_pvr.cpp" line="652"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RegEx&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RegEx&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/regex/regex.h" line="100"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;texture&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;texture&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/theora/video_stream_theora.cpp" line="689"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/theora/video_stream_theora.cpp" line="656"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;discover_multicast_if&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;discover_multicast_if&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/upnp/upnp.cpp" line="396"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script.h" line="98"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;VisualScriptBuiltinFunc&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;VisualScriptBuiltinFunc&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script_builtin_funcs.h" line="146"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;output_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;output_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script_expression.cpp" line="1568"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script_expression.h" line="47"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script_flow_control.h" line="196"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script_flow_control.cpp" line="162"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;base_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;base_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/visual_script/visual_script_flow_control.cpp" line="925"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;MkvReader&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;MkvReader&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/webm/video_stream_webm.cpp" line="53"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;transfer_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;transfer_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/webrtc/webrtc_multiplayer.cpp" line="376"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;connection_status&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;connection_status&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/webrtc/webrtc_multiplayer.cpp" line="378"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/webrtc/webrtc_peer_connection_gdnative.cpp" line="80"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;WebRTCDataChannelJS&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;WebRTCDataChannelJS&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="modules/webrtc/webrtc_data_channel_js.h" line="87"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ctx&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ctx&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_peer.h" line="70"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bind_ip&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bind_ip&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="modules/websocket/websocket_server.cpp" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_server.cpp" line="175"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_server.cpp" line="255"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_peer.cpp" line="148"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_peer.cpp" line="154"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_peer.cpp" line="157"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_peer.cpp" line="185"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="modules/websocket/wsl_peer.cpp" line="188"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/audio_driver_opensl.cpp" line="81"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/audio_driver_opensl.cpp" line="220"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rendering_driver&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rendering_driver&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/display_server_android.cpp" line="371"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rendering_driver&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rendering_driver&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/display_server_android.cpp" line="374"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/display_server_android.cpp" line="49"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;godot_io_instance&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;godot_io_instance&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/java_godot_io_wrapper.cpp" line="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;godot_instance&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;godot_instance&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/java_godot_wrapper.cpp" line="41"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;obj&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;obj&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/jni_utils.h" line="43"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pthread&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pthread&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/thread_jandroid.cpp" line="152"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;instance&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;instance&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/android/api/jni_singleton.h" line="237"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/os_android.cpp" line="112"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/haiku/audio_driver_media_kit.cpp" line="76"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;HaikuDirectWindow&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;HaikuDirectWindow&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/haiku/haiku_direct_window.h" line="71"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ContextGL_Haiku&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ContextGL_Haiku&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/haiku/context_gl_haiku.h" line="57"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/export/export.cpp" line="266"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/export/export.cpp" line="615"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/android/export/export.cpp" line="640"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;last_buttons_state&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;last_buttons_state&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/haiku/haiku_direct_window.cpp" line="41"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;last_key_modifier_state&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;last_key_modifier_state&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/haiku/haiku_direct_window.cpp" line="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/iphone/os_iphone.cpp" line="76"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;default_video_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;default_video_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/linuxbsd/context_gl_x11.cpp" line="245"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/javascript/export/export.cpp" line="614"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;JoypadLinux&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;JoypadLinux&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/linuxbsd/joypad_linux.h" line="44"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;devpath&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;devpath&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="55"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/linuxbsd/joypad_linux.cpp" line="99"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;device_ref&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;device_ref&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/osx/joypad_osx.cpp" line="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ff_device&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ff_device&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/osx/joypad_osx.cpp" line="41"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ffservice&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ffservice&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/osx/joypad_osx.cpp" line="44"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/osx/joypad_osx.cpp" line="202"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;JoypadOSX&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;JoypadOSX&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/osx/joypad_osx.h" line="121"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/linuxbsd/display_server_x11.cpp" line="2315"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;hWnd&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;hWnd&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/windows/context_gl_windows.cpp" line="222"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;get_mod_info&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;get_mod_info&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/windows/crash_handler_windows.cpp" line="94"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/uwp/export/export.cpp" line="999"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;last_pad&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;last_pad&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/windows/joypad_windows.h" line="86"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;last_packet&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;last_packet&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/windows/joypad_windows.h" line="110"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;JoypadWindows&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;JoypadWindows&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/windows/joypad_windows.h" line="55"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/windows/display_server_windows.cpp" line="1761"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/windows/display_server_windows.cpp" line="2985"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/windows/display_server_windows.cpp" line="3129"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;OS_Windows&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;OS_Windows&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="platform/windows/os_windows.h" line="172"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/windows/joypad_windows.cpp" line="244"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/windows/joypad_windows.cpp" line="254"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;hInstance&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;hInstance&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/windows/os_windows.cpp" line="818"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_estimate_cost&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_estimate_cost&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/scene_string_names.cpp" line="37"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;animation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;animation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/animated_sprite_2d.cpp" line="767"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;specular_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;specular_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/animated_sprite_2d.cpp" line="770"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rect&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rect&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/back_buffer_copy.cpp" line="107"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/canvas_modulate.cpp" line="98"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;camera_pos&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;camera_pos&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/camera_2d.cpp" line="793"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rid&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rid&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/collision_object_2d.cpp" line="436"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;aabb&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;aabb&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/collision_polygon_2d.cpp" line="319"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rect&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rect&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/collision_shape_2d.cpp" line="249"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="platform/iphone/export/export.cpp" line="85"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="platform/iphone/export/export.cpp" line="723"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;particles&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;particles&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/gpu_particles_2d.cpp" line="411"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;canvas_light&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;canvas_light&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/light_2d.cpp" line="461"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PhysicsBody2D&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PhysicsBody2D&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.h" line="53"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="167"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;softness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;softness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="223"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="294"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;initial_offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;initial_offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="295"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="405"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rest_length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rest_length&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="406"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;stiffness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;stiffness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="407"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;damping&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;damping&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/joints_2d.cpp" line="408"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;occ_polygon&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;occ_polygon&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/light_occluder_2d.cpp" line="153"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;occluder&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;occluder&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/light_occluder_2d.cpp" line="296"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;default_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;default_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/line_builder.cpp" line="99"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;map&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;map&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/navigation_2d.cpp" line="87"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;agent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;agent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/navigation_agent_2d.cpp" line="145"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;agent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;agent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/navigation_obstacle_2d.cpp" line="84"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="499"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="155"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="164"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="174"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="194"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="208"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="214"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="221"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/node_2d.cpp" line="237"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;motion_scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;motion_scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/parallax_layer.cpp" line="170"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/path_2d.cpp" line="418"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;h_offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;h_offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/path_2d.cpp" line="419"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;v_offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;v_offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/path_2d.cpp" line="420"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;lookahead&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;lookahead&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/path_2d.cpp" line="425"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;tex_scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;tex_scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/polygon_2d.cpp" line="731"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cast_to&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cast_to&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/ray_cast_2d.cpp" line="346"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;constant_angular_velocity&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;constant_angular_velocity&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="230"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mass&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mass&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="946"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;gravity_scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;gravity_scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="948"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;linear_damp&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;linear_damp&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="949"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;angular_damp&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;angular_damp&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="950"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;angular_velocity&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;angular_velocity&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="955"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="407"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/2d/physics_body_2d.cpp" line="409"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;skeleton&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;skeleton&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/skeleton_2d.cpp" line="303"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;specular_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;specular_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/sprite_2d.cpp" line="530"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;unit_rect&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;unit_rect&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/touch_screen_button.cpp" line="426"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rect&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rect&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/visibility_notifier_2d.cpp" line="150"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pos&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pos&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.h" line="167"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;canvas_items&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;canvas_items&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.h" line="168"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;body&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;body&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.h" line="169"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cells&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cells&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.h" line="171"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;occluder_instances&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;occluder_instances&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.h" line="172"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;navpoly_ids&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;navpoly_ids&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.h" line="173"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cell_size&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cell_size&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/2d/tile_map.cpp" line="1951"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rid&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rid&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/collision_object_3d.cpp" line="344"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;aabb&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;aabb&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/collision_polygon_3d.cpp" line="201"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;camera&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;camera&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/camera_3d.cpp" line="682"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;extents&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;extents&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/decal.cpp" line="216"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;probe&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;probe&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/gi_probe.cpp" line="298"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;extents&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;extents&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/gi_probe.cpp" line="565"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;im&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;im&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/immediate_geometry_3d.cpp" line="161"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/light_3d.cpp" line="327"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/light_3d.cpp" line="377"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Light3D&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Light3D&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/3d/light_3d.h" line="97"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;map&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;map&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/navigation_3d.cpp" line="115"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;agent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;agent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/navigation_agent_3d.cpp" line="154"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;agent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;agent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/navigation_obstacle_3d.cpp" line="92"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/path_3d.cpp" line="406"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;delta_offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;delta_offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/path_3d.cpp" line="407"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;h_offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;h_offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/path_3d.cpp" line="408"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;v_offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;v_offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/path_3d.cpp" line="409"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;grid_radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;grid_radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/proximity_group_3d.cpp" line="208"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;interior_ambient&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;interior_ambient&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/reflection_probe.cpp" line="263"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cast_to&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cast_to&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/ray_cast_3d.cpp" line="400"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;spatial_attachment_path&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;spatial_attachment_path&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/soft_body_3d.cpp" line="107"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/soft_body_3d.cpp" line="109"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;animation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;animation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/sprite_3d.cpp" line="1140"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_steering&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_steering&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/vehicle_body_3d.cpp" line="367"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_pitchControl&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_pitchControl&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/vehicle_body_3d.cpp" line="984"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_currentVehicleSpeedKmHour&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_currentVehicleSpeedKmHour&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/vehicle_body_3d.cpp" line="985"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;aabb&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;aabb&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/3d/visibility_notifier_3d.cpp" line="122"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;time&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;time&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="135"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;add_amount&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;add_amount&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="425"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;add_amount&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;add_amount&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="478"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;blend_amount&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;blend_amount&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="529"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;blend_amount&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;blend_amount&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="576"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="609"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;prev_xfading&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;prev_xfading&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="842"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;prev&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;prev&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="843"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;time&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;time&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="844"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;current&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;current&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="845"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;prev_current&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;prev_current&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_blend_tree.cpp" line="846"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;playback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;playback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_node_state_machine.cpp" line="1009"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;root&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;root&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/animation/animation_player.cpp" line="1712"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.h" line="90"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.h" line="91"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.h" line="92"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;live_edit_root&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;live_edit_root&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.h" line="142"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SceneDebuggerObject&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SceneDebuggerObject&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.h" line="72"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SceneDebuggerTree&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SceneDebuggerTree&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.h" line="102"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/debugger/scene_debugger.cpp" line="255"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/color_rect.cpp" line="61"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GraphEditFilter&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GraphEditFilter&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/gui/graph_edit.h" line="53"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color_left&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color_left&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/graph_node.h" line="61"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;xl_text&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;xl_text&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/label.cpp" line="699"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;border_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;border_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/reference_rect.cpp" line="76"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/rich_text_effect.cpp" line="106"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;orientation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;orientation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/scroll_bar.cpp" line="662"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;drag_node_speed&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;drag_node_speed&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/scroll_bar.cpp" line="669"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/gui/rich_text_label.cpp" line="1105"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/gui/rich_text_label.cpp" line="1107"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;orientation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;orientation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/slider.cpp" line="288"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_texture_region&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_texture_region&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/texture_button.cpp" line="355"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rad_center_off&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rad_center_off&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/texture_progress.cpp" line="537"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;begin_key&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;begin_key&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/text_edit.h" line="58"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;end_key&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;end_key&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/text_edit.h" line="59"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/text_edit.h" line="60"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/tree.h" line="106"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;custom_draw_obj&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;custom_draw_obj&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/gui/tree.h" line="115"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TreeItem&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TreeItem&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/gui/tree.h" line="150"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/gui/video_player.cpp" line="66"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/main/canvas_layer.cpp" line="324"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/main/http_request.cpp" line="133"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;world_2d&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;world_2d&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/main/viewport.cpp" line="3548"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/capsule_shape_2d.cpp" line="122"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;height&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;height&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/capsule_shape_2d.cpp" line="123"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/circle_shape_2d.cpp" line="93"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;a&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;a&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/concave_polygon_shape_3d.h" line="52"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;b&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;b&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/concave_polygon_shape_3d.h" line="53"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;outline_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;outline_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/dynamic_font.cpp" line="1035"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;left_tangent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;left_tangent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/curve.h" line="60"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;right_tangent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;right_tangent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/curve.h" line="61"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pos&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pos&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/curve.h" line="72"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;left_tangent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;left_tangent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/curve.h" line="73"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;right_tangent&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;right_tangent&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/curve.h" line="74"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Point&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Point&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="scene/resources/curve.h" line="66"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;normal&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;normal&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/line_shape_2d.cpp" line="122"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/resources/mesh.cpp" line="1546"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;multimesh&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;multimesh&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/multimesh.cpp" line="378"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;source_group_name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;source_group_name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/navigation_mesh.cpp" line="544"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;state&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;state&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/packed_scene.cpp" line="1758"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;extents&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;extents&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/rectangle_shape_2d.cpp" line="77"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;a&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;a&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/segment_shape_2d.cpp" line="104"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/segment_shape_2d.cpp" line="184"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;error&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;error&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/resource_format_text.cpp" line="748"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/resources/resource_format_text.cpp" line="1439"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/resources/resource_format_text.h" line="102"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="scene/resources/resource_format_text.h" line="103"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;shape&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;shape&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/shape_2d.cpp" line="112"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;custom_bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;custom_bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/shape_2d.cpp" line="113"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;shape&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;shape&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/shape_3d.cpp" line="121"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;shader&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;shader&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/sky_material.cpp" line="259"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;shader&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;shader&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/sky_material.cpp" line="328"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;shader&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;shader&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/sky_material.cpp" line="590"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;primitive&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;primitive&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/surface_tool.cpp" line="1052"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bg_color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bg_color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/style_box.cpp" line="954"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/style_box.cpp" line="1073"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;canvas&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;canvas&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/world_2d.cpp" line="389"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;space&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;space&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="scene/resources/world_3d.cpp" line="356"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;peak_volume&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;peak_volume&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/audio_server.h" line="207"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;collider_id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;collider_id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_server_2d.h" line="512"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;collider_id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;collider_id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_server_3d.h" line="498"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;world_scale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;world_scale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/xr_server.cpp" line="371"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/audio/audio_driver_dummy.cpp" line="59"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/audio/audio_stream.cpp" line="112"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/audio/audio_stream.cpp" line="274"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/audio/effects/audio_effect_filter.cpp" line="172"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;format&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;format&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/audio/effects/audio_effect_record.cpp" line="300"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/audio/effects/audio_effect_record.cpp" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CameraFeed&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CameraFeed&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/camera/camera_feed.h" line="99"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.h" line="231"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;a&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;a&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.h" line="275"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;b&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;b&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.h" line="276"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;n&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;n&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.h" line="277"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RayShape2DSW&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RayShape2DSW&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.h" line="231"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;AreaCMP&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;AreaCMP&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.h" line="96"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rid&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rid&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/area_2d_sw.cpp" line="36"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rid&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rid&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/area_2d_sw.cpp" line="42"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/joints_2d_sw.h" line="56"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;max_force&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;max_force&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/joints_2d_sw.h" line="57"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;max_bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;max_bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/joints_2d_sw.h" line="57"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="671"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;angular_velocity&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;angular_velocity&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="673"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;biased_angular_velocity&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;biased_angular_velocity&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="674"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mass&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mass&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="675"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;inertia&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;inertia&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="676"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_inv_inertia&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_inv_inertia&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="678"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_inv_mass&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_inv_mass&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="679"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bounce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bounce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="680"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;friction&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;friction&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="681"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;applied_torque&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;applied_torque&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_2d_sw.cpp" line="683"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;current&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;current&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/broad_phase_2d_basic.cpp" line="177"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;unpair_callback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;unpair_callback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/broad_phase_2d_basic.cpp" line="178"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pair_callback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pair_callback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/broad_phase_2d_basic.cpp" line="180"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/body_pair_2d_sw.cpp" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/collision_solver_2d_sw.cpp" line="137"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;margin_A&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;margin_A&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="370"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;margin_B&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;margin_B&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="371"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;best_depth&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;best_depth&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="372"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;motion_A&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;motion_A&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="377"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;motion_B&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;motion_B&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="378"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;anchor_A&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;anchor_A&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/joints_2d_sw.cpp" line="192"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;A_groove_1&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;A_groove_1&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/joints_2d_sw.cpp" line="336"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;anchor_A&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;anchor_A&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/joints_2d_sw.cpp" line="444"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;custom_bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;custom_bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.cpp" line="84"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/shape_2d_sw.cpp" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/physics_server_2d_sw.cpp" line="166"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/physics_server_2d_sw.cpp" line="1305"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/physics_server_2d_sw.cpp" line="1356"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/physics_server_2d_sw.cpp" line="1379"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/step_2d_sw.cpp" line="42"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;contact_recycle_radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;contact_recycle_radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1364"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;contact_max_separation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;contact_max_separation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1365"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;contact_max_allowed_penetration&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;contact_max_allowed_penetration&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1366"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;test_motion_min_contact_depth&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;test_motion_min_contact_depth&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1367"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;constraint_bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;constraint_bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1369"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;body_linear_velocity_sleep_threshold&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;body_linear_velocity_sleep_threshold&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1370"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="379"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="655"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1135"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1155"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1164"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1166"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;AreaCMP&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;AreaCMP&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.h" line="108"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rid&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rid&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/area_3d_sw.cpp" line="36"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rid&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rid&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/area_3d_sw.cpp" line="42"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.cpp" line="772"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mass&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mass&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.cpp" line="775"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;kinematic_safe_margin&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;kinematic_safe_margin&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.cpp" line="776"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;_inv_mass&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;_inv_mass&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.cpp" line="778"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;bounce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;bounce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.cpp" line="779"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;friction&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;friction&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_3d_sw.cpp" line="780"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/body_pair_3d_sw.cpp" line="54"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;current&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;current&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/broad_phase_3d_basic.cpp" line="220"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;unpair_callback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;unpair_callback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/broad_phase_3d_basic.cpp" line="221"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pair_callback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pair_callback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/broad_phase_3d_basic.cpp" line="223"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/broad_phase_octree.cpp" line="87"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/broad_phase_octree.cpp" line="96"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;best_depth&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;best_depth&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/collision_solver_3d_sat.cpp" line="416"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;margin_A&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;margin_A&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/collision_solver_3d_sat.cpp" line="422"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;margin_B&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;margin_B&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/collision_solver_3d_sat.cpp" line="423"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/collision_solver_3d_sw.cpp" line="125"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/collision_solver_3d_sw.cpp" line="240"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;contact_recycle_radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;contact_recycle_radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1241"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;contact_max_separation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;contact_max_separation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1242"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;contact_max_allowed_penetration&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;contact_max_allowed_penetration&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1243"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;test_motion_min_contact_depth&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;test_motion_min_contact_depth&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1244"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;constraint_bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;constraint_bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1246"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;body_linear_velocity_sleep_threshold&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;body_linear_velocity_sleep_threshold&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1247"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="391"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="662"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1009"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1029"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1038"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/space_3d_sw.cpp" line="1040"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/physics_server_3d_sw.cpp" line="1377"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/physics_server_3d_sw.cpp" line="1437"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/physics_server_3d_sw.cpp" line="1464"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/physics_server_3d_sw.cpp" line="1543"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_accumulatedImpulse&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_accumulatedImpulse&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="90"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_targetVelocity&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_targetVelocity&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="91"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_maxMotorForce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_maxMotorForce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="92"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_maxLimitForce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_maxLimitForce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="93"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_loLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_loLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="94"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_hiLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_hiLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="95"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_ERP&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_ERP&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="96"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_bounce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_bounce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="97"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_damping&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_damping&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="98"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_limitSoftness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_limitSoftness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="99"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_currentLimitError&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_currentLimitError&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="101"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_targetVelocity&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_targetVelocity&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="107"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_maxMotorForce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_maxMotorForce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="108"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_limitSoftness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_limitSoftness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="109"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_loLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_loLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="110"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_hiLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_hiLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="111"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_ERP&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_ERP&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="112"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_bounce&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_bounce&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="113"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_currentLimitError&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_currentLimitError&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="115"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_lowerLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_lowerLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="153"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_lowerLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_lowerLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="167"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_upperLimit&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_upperLimit&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="168"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_accumulatedImpulse&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_accumulatedImpulse&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="169"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_limitSoftness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_limitSoftness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="171"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_damping&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_damping&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="172"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_restitution&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_restitution&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/generic_6dof_joint_3d_sw.h" line="173"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/step_3d_sw.cpp" line="44"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rbAFrame&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rbAFrame&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="94"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rbBFrame&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rbBFrame&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="95"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_swingSpan1&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_swingSpan1&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="97"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_swingSpan2&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_swingSpan2&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="98"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_twistSpan&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_twistSpan&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="99"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_biasFactor&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_biasFactor&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="100"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_relaxationFactor&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_relaxationFactor&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/cone_twist_joint_3d_sw.cpp" line="101"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rbAFrame&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rbAFrame&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/hinge_joint_3d_sw.cpp" line="77"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rbBFrame&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rbBFrame&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/hinge_joint_3d_sw.cpp" line="78"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_pivotInA&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_pivotInA&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/pin_joint_3d_sw.cpp" line="163"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_pivotInB&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_pivotInB&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/pin_joint_3d_sw.cpp" line="164"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_tau&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_tau&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/pin_joint_3d_sw.cpp" line="166"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_damping&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_damping&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/pin_joint_3d_sw.cpp" line="167"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_impulseClamp&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_impulseClamp&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/pin_joint_3d_sw.cpp" line="168"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_appliedImpulse&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_appliedImpulse&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/joints/pin_joint_3d_sw.cpp" line="169"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;base_type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;base_type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer.h" line="226"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cast_shadows&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cast_shadows&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer.h" line="227"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer.h" line="810"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;final_modulate&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;final_modulate&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer.h" line="1277"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cull_cache&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cull_cache&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer.h" line="1324"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.cpp" line="171"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.cpp" line="173"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.cpp" line="215"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.cpp" line="217"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;canvas&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;canvas&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="104"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;update_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;update_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="124"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;clear_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;clear_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="125"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;viewport_to_screen&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;viewport_to_screen&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="128"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;debug_draw&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;debug_draw&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="132"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;msaa&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;msaa&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="133"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;screen_space_aa&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;screen_space_aa&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_viewport.h" line="134"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;offset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;offset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.h" line="90"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;debug&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;debug&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.h" line="127"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;octree_id&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;octree_id&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.h" line="199"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;modulate&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;modulate&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.h" line="64"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cull_mode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cull_mode&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.h" line="107"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;modulate&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;modulate&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_canvas.h" line="151"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="182"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="270"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="447"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="765"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="777"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="2661"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="2695"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="2746"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="2769"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rendering_server_scene.cpp" line="2802"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;custom_bias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;custom_bias&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/shape_3d_sw.cpp" line="89"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/shape_3d_sw.cpp" line="251"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/shape_3d_sw.cpp" line="328"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;radius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;radius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/shape_3d_sw.cpp" line="709"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cell_size&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cell_size&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/physics_3d/shape_3d_sw.cpp" line="1654"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/physics_3d/shape_3d_sw.cpp" line="45"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Node&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Node&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.h" line="352"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;BuiltInInfo&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;BuiltInInfo&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.h" line="775"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.h" line="130"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.h" line="146"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.h" line="193"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.h" line="239"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="52"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="127"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="217"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="220"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="223"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="226"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/light_cluster_builder.cpp" line="229"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="3403"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="3764"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="4155"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5015"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5190"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5250"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5260"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5286"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="5430"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="6567"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="6848"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="6868"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/shader_language.cpp" line="6879"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_canvas_rd.cpp" line="1382"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_canvas_rd.cpp" line="1528"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_canvas_rd.cpp" line="1858"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_canvas_rd.cpp" line="2088"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_canvas_rd.cpp" line="2102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RasterizerCanvasRD&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RasterizerCanvasRD&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_canvas_rd.h" line="499"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="188"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="447"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="470"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="1284"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="1291"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="1301"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="1341"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="1343"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="1345"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="2125"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="2800"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="2806"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="2812"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="2819"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.cpp" line="3147"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RasterizerSceneHighEndRD&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RasterizerSceneHighEndRD&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_high_end_rd.h" line="653"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/render_pipeline_vertex_format_cache_rd.cpp" line="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="482"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="490"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="568"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="576"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="706"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="714"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="874"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="1000"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="1015"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="4266"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_scene_rd.cpp" line="4340"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/xr/xr_positional_tracker.cpp" line="226"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/xr/xr_positional_tracker.cpp" line="227"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;rumble&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;rumble&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/xr/xr_positional_tracker.cpp" line="233"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/shader_compiler_rd.cpp" line="1239"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;format&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;format&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.h" line="169"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;format_srgb&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;format_srgb&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.h" line="170"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;swizzle_r&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;swizzle_r&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.h" line="171"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;swizzle_g&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;swizzle_g&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.h" line="172"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;swizzle_b&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;swizzle_b&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.h" line="173"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;swizzle_a&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;swizzle_a&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.h" line="174"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="servers/rendering/rasterizer_rd/rasterizer_storage_rd.cpp" line="1742"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/Common/BaseProcess.h" line="135"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FileLogStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FileLogStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/Common/FileLogStream.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ScenePreprocessor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ScenePreprocessor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/Common/ScenePreprocessor.h" line="81"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Scope&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Scope&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/FBX/FBXParser.h" line="124"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Node&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Node&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/FBX/FBXExportNode.h" line="77"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/FBX/FBXMaterial.cpp" line="130"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/PostProcessing/ConvertToLHProcess.cpp" line="224"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/PostProcessing/ConvertToLHProcess.cpp" line="298"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/assimp/code/PostProcessing/TextureTransform.cpp" line="245"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Block128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Block128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_astc_decomp.cpp" line="345"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;job_pool&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;job_pool&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="361"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;color_rgba&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;color_rgba&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="445"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;rand&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;rand&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="849"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 3 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 3 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 3 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 3 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 4 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 4 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 4 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 4 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 6 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 6 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 6 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 6 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 16 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 16 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec &amp;lt; 16 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec &amp;lt; 16 , float &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_enc.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;params&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;params&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_etc.h" line="887"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_backend.cpp" line="611"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;approx_move_to_front&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;approx_move_to_front&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder_internal.h" line="517"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;approx_move_to_front&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;approx_move_to_front&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder_internal.h" line="570"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;packed_uint &amp;lt; 4 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;packed_uint &amp;lt; 4 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu.h" line="255"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;basisu_lowlevel_transcoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;basisu_lowlevel_transcoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.h" line="133"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;basisu_transcoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;basisu_transcoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.h" line="268"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_frontend.cpp" line="2397"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_resampler.cpp" line="106"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_resampler.cpp" line="109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_resampler.cpp" line="152"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_resampler.cpp" line="264"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/basisu_resampler.cpp" line="766"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/lodepng.cpp" line="2840"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Collision/BroadPhaseCollision/b3DynamicBvh.cpp" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Collision/BroadPhaseCollision/b3DynamicBvh.cpp" line="301"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;btTypedObject&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;btTypedObject&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btScalar.h" line="801"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHull.cpp" line="636"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHull.cpp" line="640"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHull.cpp" line="939"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btVector3&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btVector3&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btVector3.h" line="136"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btVector4&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btVector4&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btVector3.h" line="1085"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btVector4&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btVector4&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btVector3.h" line="1090"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btQuadWord&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btQuadWord&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btQuadWord.h" line="76"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHullComputer.cpp" line="151"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHullComputer.cpp" line="155"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Rational128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Rational128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHullComputer.cpp" line="338"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Vertex &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Vertex &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHullComputer.cpp" line="675"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Edge &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Edge &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHullComputer.cpp" line="675"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Face &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Face &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btConvexHullComputer.cpp" line="675"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btReducedVector&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btReducedVector&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btReducedVector.h" line="41"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CProfileSample&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CProfileSample&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btQuickprof.h" line="193"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btQuaternion&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btQuaternion&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btQuaternion.h" line="57"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/TaskScheduler/btTaskScheduler.cpp" line="358"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btThreadSupportPosix&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btThreadSupportPosix&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/TaskScheduler/btThreadSupportPosix.cpp" line="96"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RemovePairCallback&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RemovePairCallback&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Collision/BroadPhaseCollision/b3OverlappingPairCache.cpp" line="92"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RemovePairCallback&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RemovePairCallback&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Collision/BroadPhaseCollision/b3OverlappingPairCache.cpp" line="540"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;b3CpuNarrowPhase&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;b3CpuNarrowPhase&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Collision/NarrowPhaseCollision/b3CpuNarrowPhase.h" line="24"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;b3ProfileZone&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;b3ProfileZone&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Common/b3Logging.h" line="28"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;b3TypedObject&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;b3TypedObject&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Common/b3Scalar.h" line="658"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Geometry/b3ConvexHullComputer.cpp" line="155"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Geometry/b3ConvexHullComputer.cpp" line="159"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Rational128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Rational128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Geometry/b3ConvexHullComputer.cpp" line="342"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Vertex &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Vertex &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Geometry/b3ConvexHullComputer.cpp" line="679"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Edge &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Edge &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Geometry/b3ConvexHullComputer.cpp" line="679"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Face &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Face &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Geometry/b3ConvexHullComputer.cpp" line="679"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;b3BulletFile&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;b3BulletFile&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/Bullet3Serialize/Bullet2FileLoader/b3BulletFile.h" line="53"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.cpp" line="8218"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.cpp" line="8483"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.cpp" line="8521"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.cpp" line="8915"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.cpp" line="8917"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/basis_universal/transcoder/basisu_transcoder.cpp" line="8939"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;btDbvntNode&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;btDbvntNode&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvt.h" line="204"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvt.cpp" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvt.cpp" line="304"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_prediction&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_prediction&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="136"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_updates_ratio&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_updates_ratio&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="145"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;btDbvtTreeCollider&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;btDbvtTreeCollider&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="105"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;BroadphaseRayTester&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;BroadphaseRayTester&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="229"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;BroadphaseAabbTester&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;BroadphaseAabbTester&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="289"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="110"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="111"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="208"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="221"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="235"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="295"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="316"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="381"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="474"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="475"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="592"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp" line="593"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btActivatingCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btActivatingCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btActivatingCollisionAlgorithm.h" line="28"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btCollisionDispatcher&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btCollisionDispatcher&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionDispatcher.h" line="108"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btBox2dBox2dCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btBox2dBox2dCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btBox2dBox2dCollisionAlgorithm.h" line="33"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btBoxBoxCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btBoxBoxCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btBoxBoxCollisionAlgorithm.h" line="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btBoxBoxCollisionAlgorithm.cpp" line="50"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btBoxBoxCollisionAlgorithm.cpp" line="51"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;mCallback&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;mCallback&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionDispatcherMt.cpp" line="113"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btCollisionDispatcherMt&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btCollisionDispatcherMt&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionDispatcherMt.h" line="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionDispatcher.cpp" line="233"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionDispatcher.cpp" line="234"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionObject.cpp" line="83"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btCollisionWorldImporter&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btCollisionWorldImporter&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorldImporter.h" line="90"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorldImporter.cpp" line="265"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorldImporter.cpp" line="92"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorldImporter.cpp" line="122"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCompoundCompoundCollisionAlgorithm.cpp" line="66"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCompoundCompoundCollisionAlgorithm.cpp" line="81"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCompoundCompoundCollisionAlgorithm.cpp" line="176"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCompoundCompoundCollisionAlgorithm.cpp" line="326"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCompoundCompoundCollisionAlgorithm.cpp" line="366"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorld.cpp" line="172"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorld.cpp" line="303"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorld.cpp" line="626"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorld.cpp" line="972"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorld.cpp" line="1058"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btCollisionWorld.cpp" line="1204"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;CreateFunc&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;CreateFunc&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btConvexConvexAlgorithm.h" line="89"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btEmptyAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btEmptyAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btEmptyCollisionAlgorithm.h" line="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btInternalEdgeUtility.cpp" line="491"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btInternalEdgeUtility.cpp" line="522"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.h" line="130"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.h" line="131"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.h" line="143"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.h" line="144"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.cpp" line="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.cpp" line="47"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.cpp" line="73"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btGhostObject.cpp" line="85"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btSimulationIslandManager.cpp" line="52"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btSimulationIslandManager.cpp" line="53"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btSphereSphereCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btSphereSphereCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btSphereSphereCollisionAlgorithm.h" line="37"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btSphereTriangleCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btSphereTriangleCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btSphereTriangleCollisionAlgorithm.h" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btSphereTriangleCollisionAlgorithm.cpp" line="53"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionDispatch/btSphereTriangleCollisionAlgorithm.cpp" line="54"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btConvexInternalShape.h" line="156"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btCapsuleShape.h" line="158"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btConeShape.h" line="160"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btConvexHullShape.cpp" line="174"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;LocalSupportVertexCallback&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;LocalSupportVertexCallback&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btConvexTriangleMeshShape.cpp" line="40"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;InertiaCallback&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;InertiaCallback&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btConvexTriangleMeshShape.cpp" line="232"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btCylinderShapeX&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btCylinderShapeX&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btCylinderShape.h" line="134"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btCylinderShapeZ&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btCylinderShapeZ&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btCylinderShape.h" line="156"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btCylinderShape.h" line="191"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btMultiSphereShape.cpp" line="146"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btMultiSphereShape.cpp" line="150"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btMultiSphereShape.cpp" line="156"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btScaledBvhTriangleMeshShape.h" line="79"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;NodeTriangleCallback&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;NodeTriangleCallback&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btOptimizedBvh.cpp" line="45"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStaticPlaneShape.h" line="87"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="213"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="224"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="225"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="262"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="263"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="280"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="281"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="301"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp" line="302"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btGImpactBvh&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btGImpactBvh&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/btGImpactBvh.h" line="185"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/btGenericPoolAllocator.cpp" line="163"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_radixsort.h" line="237"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;GIM_BOX_BOX_TRANSFORM_CACHE&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;GIM_BOX_BOX_TRANSFORM_CACHE&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_box_collision.h" line="153"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;gim_array &amp;lt; GIM_PAIR &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;gim_array &amp;lt; GIM_PAIR &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;gim_array &amp;lt; GIM_BOX_TREE_NODE &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;gim_array &amp;lt; GIM_BOX_TREE_NODE &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;gim_array &amp;lt; GIM_AABB_DATA &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;gim_array &amp;lt; GIM_AABB_DATA &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="72"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="76"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;gim_array &amp;lt; GIM_CONTACT &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;gim_array &amp;lt; GIM_CONTACT &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;gim_array &amp;lt; GIM_RSORT_TOKEN &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;gim_array &amp;lt; GIM_RSORT_TOKEN &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_array.h" line="129"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_point&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_point&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_contact.h" line="77"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_normal&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_normal&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_contact.h" line="78"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_depth&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_depth&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/Gimpact/gim_contact.h" line="79"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_convexShapeFrom&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_convexShapeFrom&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp" line="123"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_convexShapeTo&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_convexShapeTo&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp" line="124"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_triangleToWorld&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_triangleToWorld&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp" line="125"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_hitFraction&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_hitFraction&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp" line="126"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_triangleCollisionMargin&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_triangleCollisionMargin&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp" line="127"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_allowedPenetration&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_allowedPenetration&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp" line="128"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btPersistentManifold.cpp" line="311"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btPersistentManifold.cpp" line="314"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletCollision/NarrowPhaseCollision/btPersistentManifold.cpp" line="315"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;AssignConstraintsToGridBatchesLoop&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;AssignConstraintsToGridBatchesLoop&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btBatchedConstraints.cpp" line="778"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btKinematicClosestNotMeRayResultCallback&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btKinematicClosestNotMeRayResultCallback&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Character/btKinematicCharacterController.cpp" line="48"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btGearConstraint.h" line="127"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolverMt.cpp" line="396"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolverMt.cpp" line="397"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp" line="1003"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp" line="1004"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_tau&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_tau&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btSolve2LinearConstraint.h" line="33"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_damping&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_damping&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/ConstraintSolver/btSolve2LinearConstraint.h" line="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.cpp" line="1414"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.cpp" line="1410"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btRigidBody&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btRigidBody&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Dynamics/btRigidBody.h" line="167"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Dynamics/btRigidBody.h" line="192"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Dynamics/btRigidBody.h" line="198"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Dynamics/btRigidBody.cpp" line="467"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBody.cpp" line="2193"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBody.cpp" line="2215"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBody.cpp" line="2276"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBodyLinkCollider.h" line="64"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBodyLinkCollider.h" line="70"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBodyLinkCollider.h" line="166"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Featherstone/btMultiBodyLinkCollider.h" line="170"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btMLCPSolver&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btMLCPSolver&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/MLCPSolvers/btMLCPSolver.h" line="65"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_suspensionRestLength1&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_suspensionRestLength1&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="86"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_maxSuspensionTravelCm&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_maxSuspensionTravelCm&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="87"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_wheelsRadius&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_wheelsRadius&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="89"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_suspensionStiffness&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_suspensionStiffness&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="90"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_wheelsDampingCompression&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_wheelsDampingCompression&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="91"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_wheelsDampingRelaxation&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_wheelsDampingRelaxation&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="92"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_chassisConnectionPointCS&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_chassisConnectionPointCS&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="93"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_wheelDirectionCS&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_wheelDirectionCS&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="94"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_wheelAxleCS&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_wheelAxleCS&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="95"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_frictionSlip&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_frictionSlip&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="96"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_steering&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_steering&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;btWheelInfo&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;btWheelInfo&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btWheelInfo.h" line="83"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btDefaultVehicleRaycaster&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btDefaultVehicleRaycaster&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletDynamics/Vehicle/btRaycastVehicle.h" line="210"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vec3&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vec3&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletInverseDynamics/details/IDLinearMathInterface.hpp" line="24"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;mat33&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;mat33&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletInverseDynamics/details/IDLinearMathInterface.hpp" line="39"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;vecx&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;vecx&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletInverseDynamics/details/IDLinearMathInterface.hpp" line="58"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btSoftBody&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btSoftBody&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.h" line="845"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Body&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Body&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.h" line="502"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Body&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Body&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.h" line="503"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.h" line="1123"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.h" line="1129"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;addScaledExplicitForce&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;addScaledExplicitForce&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableLagrangianForce.h" line="64" info="Virtual function in base class"/>
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableMassSpringForce.h" line="46" info="Function in derived class"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;DeformableContactConstraint&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;DeformableContactConstraint&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btCGProjection.h" line="32"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btDeformableContactProjection&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btDeformableContactProjection&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableContactProjection.h" line="68"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btDeformableGravityForce&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btDeformableGravityForce&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableGravityForce.h" line="27"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;MassPreconditioner&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;MassPreconditioner&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btPreconditioner.h" line="49"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableMultiBodyDynamicsWorld.h" line="211"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_total_normal_dv&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_total_normal_dv&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableContactConstraint.cpp" line="153"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_total_tangent_dv&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_total_tangent_dv&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableContactConstraint.cpp" line="154"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableBodySolver.cpp" line="468"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;erp&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;erp&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="1420"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;idt&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;idt&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="1421"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_margin&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_margin&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="1422"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;friction&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;friction&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="1423"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;threshold&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;threshold&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="1424"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btSoftBodyCollisionShape&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btSoftBodyCollisionShape&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="663"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btSoftClusterCollisionShape&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btSoftClusterCollisionShape&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="729"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;btSymMatrix &amp;lt; int &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;btSymMatrix &amp;lt; int &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyInternals.h" line="637"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBodyConcaveCollisionAlgorithm.cpp" line="49"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rayFrom&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rayFrom&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="2316"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rayNormalizedDirection&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rayNormalizedDirection&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="2317"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_rayTo&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_rayTo&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="2318"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_mint&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_mint&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="2319"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4271"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4290"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4295"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4307"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4313"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4320"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4331"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4337"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4341"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4352"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4358"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4361"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4373"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4379"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4389"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4396"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4402"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4447"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4451"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4497"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4503"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4585"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftBody.cpp" line="4592"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btDeformableMultiBodyDynamicsWorld.cpp" line="553"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;btSoftSoftCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;btSoftSoftCollisionAlgorithm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftSoftCollisionAlgorithm.h" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftRigidCollisionAlgorithm.cpp" line="60"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftSoftCollisionAlgorithm.cpp" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftSoftCollisionAlgorithm.cpp" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftRigidDynamicsWorld.cpp" line="96"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftRigidDynamicsWorld.cpp" line="158"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/BulletSoftBody/btSoftRigidDynamicsWorld.cpp" line="217"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btAlignedObjectArray.h" line="284"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/bullet/LinearMath/btAlignedObjectArray.h" line="491"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;sock&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;sock&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="74"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;for_hostname&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;for_hostname&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="162"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;cert&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;cert&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="163"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="401"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="407"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="421"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="429"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="438"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="480"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/enet/godot.cpp" line="520"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_R11.cpp" line="86"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_R11.cpp" line="101"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;m_frgbaColor1&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;m_frgbaColor1&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_ETC1.cpp" line="79"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_ETC1.cpp" line="127"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_ETC1.cpp" line="147"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RG11.cpp" line="59"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RG11.cpp" line="75"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGBA8.cpp" line="95"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGBA8.cpp" line="96"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGBA8.cpp" line="113"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGBA8.cpp" line="114"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGB8.cpp" line="81"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGB8A1.cpp" line="127"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcBlock4x4Encoding_RGB8A1.cpp" line="169"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FileHeader_Pkm&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FileHeader_Pkm&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcFileHeader.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FileHeader_Ktx&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FileHeader_Ktx&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcFileHeader.h" line="128"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/etc2comp/EtcImage.cpp" line="86"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ReadableOrderTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ReadableOrderTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/InReadableOrder.cpp" line="64"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;spirvbin_t&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;spirvbin_t&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/SPVRemapper.h" line="85"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TCompiler * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TCompiler * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TCompiler * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TCompiler * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TShHandleBase * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TShHandleBase * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TShHandleBase * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TShHandleBase * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TArraySize &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TArraySize &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TArraySize &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TArraySize &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TConstUnion &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TConstUnion &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TConstUnion &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TConstUnion &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TIntermNode * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TIntermNode * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TIntermNode * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TIntermNode * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TStorageQualifier &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TStorageQualifier &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TStorageQualifier &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TStorageQualifier &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TConstUnionArray &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TConstUnionArray &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TConstUnionArray &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TConstUnionArray &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; const char * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; const char * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; const char * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; const char * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TVector &amp;lt; const char * &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TVector &amp;lt; const char * &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TVector &amp;lt; const char * &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TVector &amp;lt; const char * &amp;gt; &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TParameter &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TParameter &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TParameter &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TParameter &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; const TFunction * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; const TFunction * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; const TFunction * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; const TFunction * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; glslang :: TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; glslang :: TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; glslang :: TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; glslang :: TTypeLoc &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TSymbol * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TSymbol * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TSymbol * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TSymbol * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TIntermTyped * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TIntermTyped * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TIntermTyped * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TIntermTyped * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; const TString * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; const TString * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; const TString * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; const TString * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; Token &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; Token &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; Token &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; Token &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; int &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; int &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; int &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; int &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TokenStream * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TokenStream * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TokenStream * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TokenStream * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; glslang :: TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; glslang :: TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; glslang :: TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; glslang :: TString &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; char &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; char &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="184"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TVector &amp;lt; char &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TVector &amp;lt; char &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Common.h" line="185"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;data_&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;data_&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/hex_float.h" line="125"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;data_&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;data_&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/hex_float.h" line="129"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Float16&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Float16&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/hex_float.h" line="45"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FloatProxy &amp;lt; Float16 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FloatProxy &amp;lt; Float16 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/hex_float.h" line="125"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FloatProxy &amp;lt; Float16 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FloatProxy &amp;lt; Float16 &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/hex_float.h" line="129"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;name&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;name&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1239"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIntermTyped&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIntermTyped&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1083"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIntermTyped&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIntermTyped&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1084"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIntermOperator&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIntermOperator&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1525"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIntermBinary&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIntermBinary&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1541"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIntermUnary&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIntermUnary&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1561"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIntermAggregate&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIntermAggregate&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/intermediate.h" line="1581"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TType&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TType&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Types.h" line="1469"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;glslang::TQualifier::isExplicitInterpolation&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;glslang::TQualifier::isExplicitInterpolation&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/Include/Types.h" line="568"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;::TGlslangToSpvTraverser::getExplicitLayout&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;::TGlslangToSpvTraverser::getExplicitLayout&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/GlslangToSpv.cpp" line="4015" info=""/>
            <location file="thirdparty/glslang/SPIRV/GlslangToSpv.cpp" line="176" info=""/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SpecConstantOpModeGuard&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SpecConstantOpModeGuard&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/SPIRV/GlslangToSpv.cpp" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;glslang::TParseVersions::explicitFloat32Check&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;glslang::TParseVersions::explicitFloat32Check&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/parseVersions.h" line="113"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;glslang::TParseVersions::explicitFloat64Check&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;glslang::TParseVersions::explicitFloat64Check&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/parseVersions.h" line="114"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;tMacroInput&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;tMacroInput&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/preprocessor/PpContext.h" line="395"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;tMarkerInput&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;tMarkerInput&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/preprocessor/PpContext.h" line="423"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;tZeroInput&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;tZeroInput&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/preprocessor/PpContext.h" line="439"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;TDefaultGlslIoResolver&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;TDefaultGlslIoResolver&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/iomapper.h" line="193"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;TVarLivePair&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;TVarLivePair&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/iomapper.h" line="240"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TLiveTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TLiveTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/LiveTraverser.h" line="61"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;explicitInt8Check&amp;#039; is never used." verbose="The function &amp;#039;explicitInt8Check&amp;#039; is never used." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/Versions.cpp" line="1048"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TOutputTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TOutputTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/intermOut.cpp" line="99"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TIndexTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TIndexTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/limits.cpp" line="153"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;TDefaultIoResolver&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;TDefaultIoResolver&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/iomapper.cpp" line="905"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;TDefaultHlslIoResolver&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;TDefaultHlslIoResolver&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/iomapper.cpp" line="993"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TBuiltInIdTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TBuiltInIdTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/linkValidate.cpp" line="320"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TUserIdTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TUserIdTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/linkValidate.cpp" line="343"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;TNoContractionAssigneeCheckingTraverser&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;TNoContractionAssigneeCheckingTraverser&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/propagateNoContraction.cpp" line="468"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StateSettingGuard &amp;lt; glslang :: TIntermAggregate * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StateSettingGuard &amp;lt; glslang :: TIntermAggregate * &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/propagateNoContraction.cpp" line="198"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StateSettingGuard &amp;lt; std :: string &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StateSettingGuard &amp;lt; std :: string &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/glslang/glslang/MachineIndependent/propagateNoContraction.cpp" line="198"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/jpeg-compressor/jpgd.cpp" line="662"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/jpeg-compressor/jpgd.cpp" line="2459"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/jpeg-compressor/jpgd.cpp" line="2665"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;jpeg_decoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;jpeg_decoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/jpeg-compressor/jpgd.h" line="135"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;WebMDemuxer&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;WebMDemuxer&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/libsimplewebm/WebMDemuxer.hpp" line="77"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;OpusVorbisDecoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;OpusVorbisDecoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/libsimplewebm/OpusVorbisDecoder.hpp" line="38"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;VPXDecoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;VPXDecoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/libsimplewebm/VPXDecoder.hpp" line="63"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;lo&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;lo&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/misc/clipper.cpp" line="291"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;DoublePoint&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;DoublePoint&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/misc/clipper.hpp" line="121"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;clipperException&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;clipperException&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/misc/clipper.hpp" line="394"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/nanosvg/nanosvgrast.h" line="153"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="690"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="691"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="712"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="713"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="734"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="1033"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastContour.cpp" line="1041"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastLayers.cpp" line="112"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastLayers.cpp" line="223"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastMesh.cpp" line="47"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;rcRegion&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;rcRegion&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastRegion.cpp" line="524"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastRegion.cpp" line="1373"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/recastnavigation/Recast/Source/RecastRegion.cpp" line="1682"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Sym3x3&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Sym3x3&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/squish/maths.h" line="208"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;KdTreeNode&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;KdTreeNode&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/FloatMath.inl" line="2290"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="164"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Int128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="170"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Rational128&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Rational128&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="338"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Vertex &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Vertex &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="668"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Edge &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Edge &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="668"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PoolArray &amp;lt; Face &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PoolArray &amp;lt; Face &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="668"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;sign&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;sign&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/vhacd/src/btConvexHullComputer.cpp" line="358"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;normal&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;normal&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="892"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;AABB&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;AABB&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="979"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ArrayBase&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ArrayBase&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="1028"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ArrayView&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ArrayView&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="1268"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;BitArray&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;BitArray&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="1323"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;BVH&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;BVH&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="1492"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FullVector&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FullVector&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="1934"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Matrix&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Matrix&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="4579"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ConstArrayView &amp;lt; uint32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ConstArrayView &amp;lt; uint32_t &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="1279"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="3550"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="3690"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="5217"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6650"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6651"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6793"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6794"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6967"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6968"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="6981"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7030"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7279"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7382"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7383"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7399"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7424"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7777"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7783"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="7889"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8187"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8192"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8536"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8573"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8604"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8646"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8749"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8867"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8885"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="8925"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9035"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9244"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9324"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9345"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9347"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9428"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9430"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9488"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2020-05-12">
            <location file="thirdparty/xatlas/xatlas.cpp" line="9508"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;DEFAULT_VK_LAYERS_PATH;__APPLE__;__linux__&amp;#039; since the value of &amp;#039;DEFAULT_VK_LAYERS_PATH&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;DEFAULT_VK_LAYERS_PATH;__APPLE__;__linux__&amp;#039; since the value of &amp;#039;DEFAULT_VK_LAYERS_PATH&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="2020-05-12">
            <location file="thirdparty/vulkan/loader/loader.c" line="2948"/>
        </error>
    </errors>
</results>
