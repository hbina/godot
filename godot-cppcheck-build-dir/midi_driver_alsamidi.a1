<?xml version="1.0"?>
<analyzerinfo checksum="2709688777">
        <error id="virtualCallInConstructor" severity="warning" msg="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 212. Dynamic binding is not used." verbose="Virtual function &apos;close&apos; is called from destructor &apos;~MIDIDriverALSAMidi()&apos; at line 212. Dynamic binding is not used.">
            <location file0="/home/hbina/git/godot/drivers/alsamidi/midi_driver_alsamidi.cpp" file="/home/hbina/git/godot/drivers/alsamidi/midi_driver_alsamidi.h" line="60" column="15" info="close is a virtual function"/>
            <location file="/home/hbina/git/godot/drivers/alsamidi/midi_driver_alsamidi.cpp" line="212" column="2" info="Calling close"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/hbina/git/godot/drivers/alsamidi/midi_driver_alsamidi.cpp" line="76" column="27"/>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="get_message_size" lineNumber="40"/>
    <functiondecl functionName="thread_func" lineNumber="75"/>
    <functiondecl functionName="open" lineNumber="127"/>
    <functiondecl functionName="close" lineNumber="157"/>
    <functiondecl functionName="lock" lineNumber="174"/>
    <functiondecl functionName="unlock" lineNumber="179"/>
    <functiondecl functionName="get_connected_inputs" lineNumber="184"/>
    <functioncall functionName="EAGAIN"/>
    <functioncall functionName="ERR_PRINT"/>
    <functioncall functionName="MIDIDriverALSAMidi"/>
    <functioncall functionName="SND_RAWMIDI_NONBLOCK"/>
    <functioncall functionName="String"/>
    <functioncall functionName="buffer"/>
    <functioncall functionName="byte"/>
    <functioncall functionName="bytes"/>
    <functioncall functionName="clear"/>
    <functioncall functionName="close"/>
    <functioncall functionName="const"/>
    <functioncall functionName="create"/>
    <functioncall functionName="delay_usec"/>
    <functioncall functionName="exit_thread"/>
    <functioncall functionName="false"/>
    <functioncall functionName="for"/>
    <functioncall functionName="free"/>
    <functioncall functionName="get_message_size"/>
    <functioncall functionName="get_singleton"/>
    <functioncall functionName="hints"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="info"/>
    <functioncall functionName="insert"/>
    <functioncall functionName="lock"/>
    <functioncall functionName="memdelete"/>
    <functioncall functionName="midi_in"/>
    <functioncall functionName="name"/>
    <functioncall functionName="nullptr"/>
    <functioncall functionName="p_udata"/>
    <functioncall functionName="push_back"/>
    <functioncall functionName="receive_input_packet"/>
    <functioncall functionName="ret"/>
    <functioncall functionName="size"/>
    <functioncall functionName="snd_device_name_free_hint"/>
    <functioncall functionName="snd_device_name_get_hint"/>
    <functioncall functionName="snd_device_name_hint"/>
    <functioncall functionName="snd_rawmidi_close"/>
    <functioncall functionName="snd_rawmidi_info"/>
    <functioncall functionName="snd_rawmidi_info_free"/>
    <functioncall functionName="snd_rawmidi_info_get_name"/>
    <functioncall functionName="snd_rawmidi_info_malloc"/>
    <functioncall functionName="snd_rawmidi_open"/>
    <functioncall functionName="snd_rawmidi_read"/>
    <functioncall functionName="snd_strerror"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="this"/>
    <functioncall functionName="thread"/>
    <functioncall functionName="thread_func"/>
    <functioncall functionName="timestamp"/>
    <functioncall functionName="true"/>
    <functioncall functionName="unlock"/>
    <functioncall functionName="wait_to_finish"/>
    <functioncall functionName="while"/>
  </FileInfo>
</analyzerinfo>
