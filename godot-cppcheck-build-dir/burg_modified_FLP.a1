<?xml version="1.0"?>
<analyzerinfo checksum="1087180156">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num&apos; can be reduced." verbose="The scope of the variable &apos;num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/opus/silk/float/burg_modified_FLP.c" line="49" column="35"/>
            <symbol>num</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nrg_b&apos; can be reduced." verbose="The scope of the variable &apos;nrg_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/opus/silk/float/burg_modified_FLP.c" line="49" column="47"/>
            <symbol>nrg_b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/hbina/git/godot/thirdparty/opus/silk/float/burg_modified_FLP.c" line="49" column="54"/>
            <symbol>rc</symbol>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="silk_burg_modified_FLP" lineNumber="39"/>
    <functioncall functionName="Atmp"/>
    <functioncall functionName="C_first_row"/>
    <functioncall functionName="C_last_row"/>
    <functioncall functionName="D"/>
    <functioncall functionName="SILK_MAX_ORDER_LPC"/>
    <functioncall functionName="break"/>
    <functioncall functionName="double"/>
    <functioncall functionName="exp"/>
    <functioncall functionName="float2int"/>
    <functioncall functionName="for"/>
    <functioncall functionName="if"/>
    <functioncall functionName="invGain"/>
    <functioncall functionName="k"/>
    <functioncall functionName="log10"/>
    <functioncall functionName="minInvGain"/>
    <functioncall functionName="n"/>
    <functioncall functionName="nrg_b"/>
    <functioncall functionName="nrg_f"/>
    <functioncall functionName="num"/>
    <functioncall functionName="opus_int32"/>
    <functioncall functionName="rc"/>
    <functioncall functionName="reached_max_gain"/>
    <functioncall functionName="return"/>
    <functioncall functionName="silk_SAT16"/>
    <functioncall functionName="silk_assert"/>
    <functioncall functionName="silk_energy_FLP"/>
    <functioncall functionName="silk_float"/>
    <functioncall functionName="silk_inner_product_FLP"/>
    <functioncall functionName="silk_memcpy"/>
    <functioncall functionName="silk_memset"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="sqrt"/>
    <functioncall functionName="tmp1"/>
    <functioncall functionName="tmp2"/>
    <functioncall functionName="x"/>
    <functioncall functionName="x_ptr"/>
  </FileInfo>
</analyzerinfo>
